{
    "pipes": [
        {
            "name": "RemoveSpecialCharactersPipe",
            "id": "pipe-RemoveSpecialCharactersPipe-adea952cb556b92a9e88908e45f192da3a8b8f3893fe3e1f64011579b36c9fdcc6437bb061a6e01bace317829d73ccbea0c525db053d60751861e8d412824706",
            "file": "src/app/pipes/removeSpecialCharacters.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "specialCharacters",
                    "defaultValue": "{\n    à: 'a',\n    ç: 'c',\n    ê: 'e',\n    é: 'e',\n    è: 'e',\n    ï: 'i',\n    ô: 'o',\n    ' ': '-',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SpecialCharactersMap",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": true,
            "ngname": "removeSpecialCharacters",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nexport interface SpecialCharactersMap {\n  [accented: string]: string;\n}\n\n@Pipe({\n  name: 'removeSpecialCharacters',\n  standalone: true,\n})\nexport class RemoveSpecialCharactersPipe implements PipeTransform {\n  private specialCharacters: SpecialCharactersMap = {\n    à: 'a',\n    ç: 'c',\n    ê: 'e',\n    é: 'e',\n    è: 'e',\n    ï: 'i',\n    ô: 'o',\n    ' ': '-',\n  };\n\n  transform(value: string, ...args: unknown[]): string {\n    return value.replace(\n      new RegExp(Object.keys(this.specialCharacters).join('|'), 'g'),\n      (match) => this.specialCharacters[match],\n    );\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "Alert",
            "id": "interface-Alert-f67f890574c01e62d043d3b3be2d7f9de67e86d30b4748b196b1bbd867248919c11371776161431e812d688273bfa7fda6e73e4e205b40fe21172fba85fc3da4",
            "file": "src/app/interfaces/Alert.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Role } from \"./Role\";\r\n\r\nexport interface Alert  {\r\n  id: number;\r\n  role: Role;\r\n  set_on: Date;\r\n  mail: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "mail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "set_on",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Attendee",
            "id": "interface-Attendee-ef42932f1967ac0787f34cea796a1c6328fa568fb4b9888b19969f6b351e19a9a7e1c6f0ec7f6396e55412e3e25bcf572be52e6158ae863f36b6ee443f508099",
            "file": "src/app/interfaces/Attendee.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { User } from \"./User\";\r\nimport { Event } from \"./Event\";\r\n\r\nexport interface Attendee {\r\n  user: User;\r\n  event: Event;\r\n}\r\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Category",
            "id": "interface-Category-994a5c9520f7b9ac7b8292886ae12611cec8a49f5626f08fc034c9b355b1340183eb2b25b107ed0762fdf4140097a32041775fa77ef3045bde811a995396993e",
            "file": "src/app/interfaces/Category.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Category {\n  id: number;\n  label: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Event",
            "id": "interface-Event-485d1474bae10d90bcdfd07e4114a74d3bae53ad39450db61fe5f7e56dfb8c6ed4a051fbf584c0a059eff5abe96097554ddc939b50ff2bce715cc01f4c658d5f",
            "file": "src/app/interfaces/Event.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Person } from './Person';\nimport { Location } from './Location';\nimport { EventStatus } from \"./EventStatus\";\n\nexport interface Event {\n  title: string;\n  start: string;\n  end: string;\n  extendedProps?: {\n    id?: number;\n    contact_objective?: number;\n    item_manager?: Person;\n    location?: Location;\n    stand_size?: number;\n    status?: EventStatus;\n  };\n}\n",
            "properties": [
                {
                    "name": "end",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "extendedProps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "start",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "EventFromAPI",
            "id": "interface-EventFromAPI-b91aabb77afc74b91a5c1ed4d09bd9166b4bfb4476565d3d1a832874f913bb153eace2834d68eaa612f51ac8cc594c6b7ee5049732f386cc5cc8ab046376bb81",
            "file": "src/app/interfaces/EventFromAPI.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Person } from './Person';\nimport { Location } from './Location';\nimport { EventStatus } from \"./EventStatus\";\n\nexport interface EventFromAPI {\n  id: number;\n  name: string;\n  stand_size: number;\n  contact_objective: number;\n  date_start: Date;\n  date_end: Date;\n  status: EventStatus;\n  item_manager: Person;\n  location: Location;\n}\n",
            "properties": [
                {
                    "name": "contact_objective",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "date_end",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "date_start",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "item_manager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "location",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Location",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "stand_size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventStatus",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "EventInterface",
            "id": "interface-EventInterface-f39d4f19ed2ca3147d9a39ad382d4c828a18916b833f7766e949839e012dae8917965b0eefd51ac38d050bb954fca45894f0b9af20ec2533b0be00ddff024daf",
            "file": "src/app/components/calendar/calendar.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostListener,\n  Input,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { ButtonComponent } from '../button/button.component';\nimport {\n  FullCalendarComponent,\n  FullCalendarModule,\n} from '@fullcalendar/angular';\nimport {\n  CalendarOptions,\n  EventClickArg,\n  EventSourceInput,\n} from '@fullcalendar/core';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport listPlugin from '@fullcalendar/list';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport frLocale from '@fullcalendar/core/locales/fr';\nimport { MatIcon } from '@angular/material/icon';\nimport { DatePipe } from '@angular/common';\nimport { MatFormField } from '@angular/material/form-field';\nimport {\n  MatDatepicker,\n  MatDatepickerInput,\n  MatDatepickerModule,\n} from '@angular/material/datepicker';\nimport { FormsModule } from '@angular/forms';\nimport { MatInput, MatLabel } from '@angular/material/input';\nimport { provideNativeDateAdapter } from '@angular/material/core';\nimport { Router } from '@angular/router';\n\nexport interface EventInterface {\n  id: number;\n  title: string;\n  date_start: Date;\n  date_end: Date;\n  location: string;\n  status: string;\n}\n\n@Component({\n  selector: 'app-calendar',\n  standalone: true,\n  imports: [\n    ButtonComponent,\n    FullCalendarModule,\n    MatIcon,\n    DatePipe,\n    MatFormField,\n    MatDatepicker,\n    FormsModule,\n    MatDatepickerInput,\n    MatInput,\n    MatLabel,\n  ],\n  providers: [MatDatepickerModule, provideNativeDateAdapter()],\n  templateUrl: './calendar.component.html',\n  styleUrl: './calendar.component.css',\n})\nexport class CalendarComponent implements OnInit {\n  @ViewChild('calendar')\n  calendarComponent: FullCalendarComponent = new FullCalendarComponent(\n    {} as ElementRef,\n    {} as ChangeDetectorRef,\n  );\n\n  private calendarView: string = 'dayGridMonth';\n\n  private screenHeight: number = 0;\n  private screenWidth: number = 0;\n\n  protected selectedEvent: EventInterface = {} as EventInterface;\n\n  public endButton(): string {\n    let base = 'today prev,next';\n    if (document.documentElement.clientWidth > 660) {\n      return base + ' dayGridMonth,timeGridWeek,timeGridDay,listWeek';\n    }\n    return base;\n  }\n\n  @Input()\n  public events: EventSourceInput = [];\n\n  public x: number = 0;\n  public y: number = 0;\n\n  public calendarOptions: CalendarOptions = {\n    contentHeight: 'auto',\n    eventClick: this.handleEventClick.bind(this),\n    handleWindowResize: false,\n    headerToolbar: {\n      start: 'title',\n      center: '',\n      end: this.endButton(),\n    },\n    locale: frLocale,\n    plugins: [dayGridPlugin, listPlugin, timeGridPlugin],\n    timeZone: 'Europe/Paris',\n  };\n\n  @HostListener('window:resize', ['$event']) onResize(): void {\n    this.screenHeight = document.documentElement.clientHeight;\n    this.screenWidth = document.documentElement.clientWidth;\n    this.view();\n    this.calendarComponent.getApi().setOption('headerToolbar', {\n      start: 'title',\n      center: '',\n      end: this.endButton(),\n    });\n  }\n  constructor(private router: Router) {}\n\n  updateEvent() {\n    this.router.navigate(['/event/update'], {\n      state: { selectedEvent: this.selectedEvent },\n    });\n  }\n\n  ngOnInit() {\n    this.screenHeight = document.documentElement.clientHeight;\n    this.screenWidth = document.documentElement.clientWidth;\n    if (this.screenWidth > 660) {\n      this.calendarView = 'dayGridMonth';\n    } else {\n      this.calendarView = 'listWeek';\n    }\n    this.calendarOptions.initialView = this.calendarView;\n  }\n\n  ngAfterViewInit(): void {\n    this.calendarOptions.events = this.events;\n  }\n\n  ngOnChanges(): void {\n    this.calendarOptions.events = this.events;\n  }\n\n  private view(): void {\n    if (this.screenWidth < 660) {\n      this.calendarView = 'listWeek';\n    } else {\n      this.calendarView = 'dayGridMonth';\n    }\n    this.calendarComponent.getApi().changeView(this.calendarView);\n  }\n\n  public closeDialog(): void {\n    let dialog = document.getElementById('dialog') as HTMLDialogElement;\n    dialog.close();\n  }\n\n  public handleEventClick(clickedEvent: EventClickArg): void {\n    clickedEvent.jsEvent.preventDefault();\n    let coordinates = clickedEvent.el.getBoundingClientRect();\n\n    this.selectedEvent = {\n      title: clickedEvent.event.title,\n      date_start: clickedEvent.event.start,\n      date_end: clickedEvent.event.end,\n      location:\n        clickedEvent.event.extendedProps['location'].address +\n        ' ' +\n        clickedEvent.event.extendedProps['location'].city,\n      status: clickedEvent.event.extendedProps['status'],\n      id: clickedEvent.event.extendedProps['id'],\n      contact_objective: clickedEvent.event.extendedProps['contact_objective'],\n      stand_size: clickedEvent.event.extendedProps['stand_size'],\n      item_manager: clickedEvent.event.extendedProps['item_manager'],\n    } as EventInterface;\n    console.log(clickedEvent.event.start);\n\n    let dialog = document.getElementById('dialog') as HTMLDialogElement;\n    if (this.screenWidth > 900) {\n      this.x = coordinates.left;\n      this.y = coordinates.top;\n      if (this.screenWidth - this.x < 448) {\n        this.x = this.x - (this.screenWidth - this.x);\n      }\n      if (this.screenHeight - this.y < 220) {\n        this.y = this.y - 220;\n      }\n      dialog.style.left = this.x + 'px';\n      dialog.style.top = this.y + 'px';\n    } else {\n      dialog.style.width = this.screenWidth - 32 - 2 + 'px';\n      dialog.style.maxWidth = 'none';\n      dialog.style.top = 0 + 'px';\n      dialog.style.height = '100%';\n    }\n    dialog.show();\n  }\n\n  public closeDatepicker(picker: MatDatepicker<any>) {\n    picker['_destroyOverlay']();\n  }\n}\n",
            "properties": [
                {
                    "name": "date_end",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "date_start",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "location",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "EventStatus",
            "id": "interface-EventStatus-432b2b0c601c5cce23f8ddc6967a827043fe1998fb6b65db05e3dafdf6a84ef0f5eb0f7f33e570d1cf6d9713a3fd7147c03e34f2506c237dc2e05c1504c5e3c0",
            "file": "src/app/interfaces/EventStatus.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EventStatus {\r\n  id: number;\r\n  label: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "EventStatusHistory",
            "id": "interface-EventStatusHistory-73272214e336e053a73184776898626ef57e71cd50dee1293879ade2d998651850f61d6f6926ba0131f3ee0af5f32a61059c5d5f1701a31816aabcf6b04b219d",
            "file": "src/app/interfaces/EventStatusHistory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { User } from \"./User\";\r\nimport { Event } from \"./Event\";\r\nimport { EventStatus } from \"./EventStatus\";\r\n\r\nexport interface EventStatusHistory {\r\n  id: number;\r\n  set_on: Date;\r\n  event: Event;\r\n  status: EventStatus;\r\n  set_by: User;\r\n}\r\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "set_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "set_on",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventStatus",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Item",
            "id": "interface-Item-d000c8dbf095751a91b59959de25356eebdddd4172ee403f336d2313565925e31b084715ecb141af5796e9039de60b3409c1920170ce0c86c2e204b4928930ef",
            "file": "src/app/interfaces/Item.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Category } from './Category';\n\nexport interface Item {\n  id: number;\n  name: string;\n  category_id: Category;\n}\n",
            "properties": [
                {
                    "name": "category_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ItemLocation",
            "id": "interface-ItemLocation-ad6f5bad90a095f73a083d67660f91e59445f4497cca19c05463e05e7775a3c471bd4070b3141fba726925662333fa2ccf9da14799102e940f52d079569e5c8a",
            "file": "src/app/interfaces/ItemLocation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Item } from './Item';\nimport { Location } from './Location';\n\nexport interface ItemLocation {\n  id: number;\n  item_id: Item;\n  location_id: Location;\n  nb_to_order: number;\n  quantity: number;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "item_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Item",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "location_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Location",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "nb_to_order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Location",
            "id": "interface-Location-6cfe7654b70f060f073cf4cf29260216bd7b9c1755332e3ed4728c33d6482469423e69c9c1f0af3a2b654cfe47d54b9bbe492e6aafab44e77580140d5f6d943e",
            "file": "src/app/interfaces/Location.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Location {\n  id: number;\n  address: string;\n  city: string;\n  room?: string;\n}\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "room",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Permission",
            "id": "interface-Permission-a80c7b3d6d66c4a6c2b20a42ba4df2cf68f2d978f1fd45e0dda51af4b91e2bd1ea0b2dfe49b9180f3eee84e3ad6133f3c7adf9178bb33b84dea5ee1e2256e6af",
            "file": "src/app/interfaces/Permission.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Permission {\n  id: number;\n  label: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Person",
            "id": "interface-Person-4448055e9367b97dc672cedf5a9b8edf63a1cdb2d97b711e9027b21dd4d7d86cca4026e6a93b2039a93b41ddd1122ab67ecc8429dc4c5ece776d5a27f0ae7a26",
            "file": "src/app/interfaces/Person.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Person {\n  id: string;\n  last_name: string;\n  first_name: string;\n}\n",
            "properties": [
                {
                    "name": "first_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "last_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ReservedItem",
            "id": "interface-ReservedItem-5a26a9ca5b0fd1a2fecccfa81453afea8de3849f2eba8a66673fb0e69caf350f571decac7e91ebd8ab36948bb4ecbd8bd7cb4da9b56ff408820f6d43a3636c41",
            "file": "src/app/interfaces/ReservedItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ItemLocation } from './ItemLocation';\nimport { User } from './User';\nimport { Event } from './Event';\n\nexport interface ReservedItem {\n  status: boolean;\n  item_location: ItemLocation;\n  event: Event;\n  quantity: number;\n  quantity_ret: number;\n  reserved_on: Date;\n  reserved_by: User;\n}\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "item_location",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemLocation",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "quantity_ret",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "reserved_by",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "reserved_on",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Role",
            "id": "interface-Role-4f995ecdf6007d90966b4ed9636a81632e3f810a7615b28ff9bd91324dc9601e8a482e92dc8ad5a3f4fbef3267384157c48fc397777ab5d3566844d2cdff91eb",
            "file": "src/app/interfaces/Role.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Role {\n  id: number;\n  label: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RolePermission",
            "id": "interface-RolePermission-f4c9116637edfde9d3fc7c7a29e85de9395cf54c6ce0f50649dd9d5b39bf98a823d65cca5cb9cc152ba98e493558012e85548bb87a331411b69f91b22277fb54",
            "file": "src/app/interfaces/RolePermission.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Permission } from \"./Permission\";\r\n\r\nexport interface RolePermission {\r\n  id: number;\r\n  label: string;\r\n  permissions: Permission[];\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "permissions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Permission[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectOptions",
            "id": "interface-SelectOptions-ec13dfa643ba52fab8788eccb61d9618dd8a2e99102c65db36ba60ca1b516b87b8bf19e34c08d1ecf62f231f6d7527188c2cc3a482799d9685c3729ec4177616",
            "file": "src/app/components/select/select.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { NgForOf } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nexport interface SelectOptions {\n  value: string;\n  label: string;\n}\n\n@Component({\n  selector: 'app-select',\n  standalone: true,\n  imports: [NgForOf, ReactiveFormsModule],\n  templateUrl: './select.component.html',\n  styleUrl: './select.component.css',\n})\nexport class SelectComponent {\n  @Input()\n  options: SelectOptions[] = [];\n\n  @Input()\n  label: string = '';\n\n  @Input()\n  name: string = '';\n\n  @Input()\n  id: string = '';\n\n  @Input()\n  css: string = '';\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SpecialCharactersMap",
            "id": "interface-SpecialCharactersMap-adea952cb556b92a9e88908e45f192da3a8b8f3893fe3e1f64011579b36c9fdcc6437bb061a6e01bace317829d73ccbea0c525db053d60751861e8d412824706",
            "file": "src/app/pipes/removeSpecialCharacters.pipe.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nexport interface SpecialCharactersMap {\n  [accented: string]: string;\n}\n\n@Pipe({\n  name: 'removeSpecialCharacters',\n  standalone: true,\n})\nexport class RemoveSpecialCharactersPipe implements PipeTransform {\n  private specialCharacters: SpecialCharactersMap = {\n    à: 'a',\n    ç: 'c',\n    ê: 'e',\n    é: 'e',\n    è: 'e',\n    ï: 'i',\n    ô: 'o',\n    ' ': '-',\n  };\n\n  transform(value: string, ...args: unknown[]): string {\n    return value.replace(\n      new RegExp(Object.keys(this.specialCharacters).join('|'), 'g'),\n      (match) => this.specialCharacters[match],\n    );\n  }\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-adea952cb556b92a9e88908e45f192da3a8b8f3893fe3e1f64011579b36c9fdcc6437bb061a6e01bace317829d73ccbea0c525db053d60751861e8d412824706",
                    "args": [
                        {
                            "name": "accented",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-999a9b33990f97da464621f26b63e965972dc7250022f1fdc523533f17b1f7189bc5ecc799c789eced5bbb079b4f373c0031feea7a9c24062e48c6ff5aa18fd9",
            "file": "src/app/interfaces/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  id: number;\n  first_name: string;\n  last_name: string;\n  username: string;\n  mail: string;\n  is_active: boolean;\n  is_authenticated: boolean;\n}\n",
            "properties": [
                {
                    "name": "first_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "is_active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "is_authenticated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "last_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "mail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UserRole",
            "id": "interface-UserRole-5e5be3a0a4ac6e702a43ff8bf79aa90621a532cd19b937046ebe5f40936e1409c7269b5bb4131f7e546b7298dc919a19299d3a80bb0832c23fdcc17b300085fb",
            "file": "src/app/interfaces/UserRole.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { User } from './User';\nimport { Role } from './Role';\n\nexport interface UserRole {\n  user: User;\n  role: Role[];\n}\n",
            "properties": [
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UserRolePermission",
            "id": "interface-UserRolePermission-f4a6361878ef05e35352db89111bde962c50fc2a6543aa5d29bc71f6b7a3fa6145a45e72bcd9375f16b0cfaee5d7ba7a1dbcdbe21815d5dc8d4f9438471072e2",
            "file": "src/app/interfaces/UserRolePermission.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { RolePermission } from \"./RolePermission\";\r\nimport { User } from \"./User\";\r\n\r\nexport interface UserRolePermission {\r\n  user: User;\r\n  roles: RolePermission[]\r\n}\r\n",
            "properties": [
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RolePermission[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AddEventFormPageComponent",
            "id": "injectable-AddEventFormPageComponent-7d1b0c6ebbc780010ec10f700aa35efe936e8b642f7222a338fd541ccd45d8d61559dca20acbe23c508aec1eef3da2b58b53a5f2ebebea9112167c2495457c65",
            "file": "src/app/pages/AddEventFormPage/AddEventFormPage.component.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiEventUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "eventAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "eventContact",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "eventEndDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "eventManager",
                    "defaultValue": "{ id: '', last_name: 'A', first_name: 'Definir' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "eventName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "eventSize",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "eventStartDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Location[]",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "optionsM",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Person[]",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "closeDatepicker",
                    "args": [
                        {
                            "name": "datepicker",
                            "type": "MatDatepicker<Date>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "datepicker",
                            "type": "MatDatepicker<Date>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createEvent",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayFn",
                    "args": [
                        {
                            "name": "location",
                            "type": "Location",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "Location",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayMn",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLocation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPerson",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onOptionSelected",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOptionSelectedM",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toTitleCase",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Component, Injectable, OnInit } from '@angular/core';\nimport { ButtonComponent } from '../../components/button/button.component';\nimport { SelectComponent } from '../../components/select/select.component';\nimport {\n  MatFormField,\n  MatHint,\n  MatInput,\n  MatInputModule,\n  MatLabel,\n  MatSuffix,\n} from '@angular/material/input';\nimport {\n  MatDatepicker,\n  MatDatepickerModule,\n  MatDatepickerToggle,\n} from '@angular/material/datepicker';\nimport { MatNativeDateModule, MatOption } from '@angular/material/core';\nimport {\n  MatAutocomplete,\n  MatAutocompleteTrigger,\n} from '@angular/material/autocomplete';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatError, MatFormFieldModule } from '@angular/material/form-field';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { AsyncPipe, CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { Location } from '../../interfaces/Location';\nimport { Person } from '../../interfaces/Person';\nimport { UserService } from '../../services/User.service';\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-add-event-form-page',\n  standalone: true,\n  templateUrl: './AddEventFormPage.component.html',\n  styleUrl: './AddEventFormPage.component.css',\n  imports: [\n    ButtonComponent,\n    SelectComponent,\n    CommonModule,\n    MatInput,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatHint,\n    MatDatepickerToggle,\n    MatDatepicker,\n    MatSuffix,\n    MatLabel,\n    MatFormField,\n    MatAutocomplete,\n    MatOption,\n    FormsModule,\n    ReactiveFormsModule,\n    MatAutocompleteTrigger,\n    MatError,\n    AsyncPipe,\n  ],\n  providers: [MatDatepickerModule, MatInputModule, MatFormFieldModule],\n})\nexport class AddEventFormPageComponent implements OnInit {\n  eventName: string = '';\n  eventStartDate: Date | null = null;\n  eventEndDate: Date | null = null;\n  eventAddress: any;\n  eventManager: Person = { id: '', last_name: 'A', first_name: 'Definir' };\n  eventSize: string = '';\n  eventContact: string = '';\n  private apiUrl = environment.apiEventUrl;\n  protected options: Location[] = [];\n  protected optionsM: Person[] = [];\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n  ) {}\n\n  getLocation(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + 'location/getAll', {\n      withCredentials: true,\n    });\n  }\n\n  getPerson(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + 'person/getAll', {\n      withCredentials: true,\n    });\n  }\n\n  ngOnInit(): void {\n    this.getLocation().subscribe((data) => {\n      for (const location of data) {\n        const option: Location = {\n          id: location.id,\n          address: location.address,\n          city: location.city,\n          room: location.room,\n        };\n        const exists = this.options.some(\n          (opt) => opt.city === option.city && opt.address === option.address,\n        );\n        if (!exists) {\n          this.options.push(option);\n        }\n      }\n    }, (error) => {\n      if(error.status === 401) {\n        this.router.navigate(['login'])\n      }\n    });\n    this.getPerson().subscribe((data) => {\n      for (const person of data) {\n        const option: Person = {\n          id: person.id,\n          last_name: person.last_name,\n          first_name: person.first_name,\n        };\n        const exists = this.optionsM.some(\n          (opt) =>\n            opt.last_name === option.last_name &&\n            opt.first_name === option.first_name,\n        );\n        if (!exists) {\n          this.optionsM.push(option);\n        }\n      }\n    }, (error) => {\n      if(error.status === 401) {\n        this.router.navigate(['login'])\n      }\n    });\n  }\n\n  toTitleCase(str: string): string {\n    return str\n      .toLowerCase()\n      .split(' ')\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }\n\n  displayFn(location: Location): string {\n    return location ? `${location.address}, ${location.city}` : '';\n  }\n\n  displayMn(person: Person): string {\n    return person ? `${person.last_name} ${person.first_name}` : '';\n  }\n\n  onOptionSelected(option: any): void {\n    this.eventAddress = option;\n  }\n\n  onOptionSelectedM(option: any): void {\n    this.eventManager = option;\n  }\n\n  createEvent(form: NgForm) {\n    const headers = new HttpHeaders().set(\n      'Content-Type',\n      'application/x-www-form-urlencoded',\n    );\n\n    const eventData = new URLSearchParams();\n    eventData.set('name', this.toTitleCase(this.eventName));\n    eventData.set('date_start', this.eventStartDate?.toDateString() ?? '');\n    eventData.set('date_end', this.eventEndDate?.toDateString() ?? '');\n    eventData.set('stand_size', this.eventSize);\n    eventData.set('contact_objective', this.eventContact);\n    eventData.set('location.id', this.eventAddress.id);\n    eventData.set('item_manager.last_name', this.eventManager.last_name);\n    eventData.set('item_manager.first_name', this.eventManager.first_name);\n    if (form.valid) {\n      this.http\n        .post(this.apiUrl + 'create', eventData, {\n          headers: headers,\n          responseType: 'text',\n          withCredentials: true,\n        })\n        .subscribe(\n          () => {\n            this.router.navigate(['/success'], {\n              queryParams: {\n                text:\n                  \"L'évènement \" +\n                  this.toTitleCase(this.eventName) +\n                  ' a été ajouté avec succès',\n                link: '/event/list',\n              },\n            });\n          },\n          (error) => {\n            if(error.status === 401) {\n              this.router.navigate(['login'])\n            }\n            console.error(error.status);\n          },\n        );\n    }\n  }\n\n  public closeDatepicker(datepicker: MatDatepicker<Date>): void {\n    datepicker['_destroyOverlay']();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AddInventoryFormPageComponent",
            "id": "injectable-AddInventoryFormPageComponent-dc0151073e9b8d56d572fdade08360621d76248b134074702ef8163e4c9dc7cf687cebe615563749b34eb41e52f3e80d1bc92f1abd70173f0cd889d4a1622200",
            "file": "src/app/pages/AddInventoryFormPage/AddInventoryFormPage.component.ts",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiStockUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "categories",
                    "defaultValue": "{} as Category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "categoryControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "itemName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "locations",
                    "defaultValue": "{} as Location",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Location",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Location[]",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "optionsC",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "quantity",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "roomControl",
                    "defaultValue": "new FormControl('', Validators.required)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLocation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toTitleCase",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Component, Injectable, OnInit } from '@angular/core';\nimport { ButtonComponent } from '../../components/button/button.component';\nimport { SelectComponent } from '../../components/select/select.component';\nimport {\n  MatError,\n  MatFormField,\n  MatFormFieldModule,\n} from '@angular/material/form-field';\nimport { MatInput, MatInputModule, MatLabel } from '@angular/material/input';\nimport { MatOption, MatSelect } from '@angular/material/select';\nimport {\n  FormControl,\n  ReactiveFormsModule,\n  FormsModule,\n  Validators,\n} from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { AsyncPipe, NgOptimizedImage } from '@angular/common';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { Router } from '@angular/router';\nimport { Location } from '../../interfaces/Location';\nimport { Category } from '../../interfaces/Category';\nimport { UserService } from '../../services/User.service';\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-add-inventory-form-page',\n  standalone: true,\n  templateUrl: './AddInventoryFormPage.component.html',\n  styleUrl: './AddInventoryFormPage.component.css',\n  imports: [\n    ButtonComponent,\n    SelectComponent,\n    MatFormField,\n    MatInput,\n    MatLabel,\n    MatError,\n    MatSelect,\n    MatOption,\n    FormsModule,\n    ReactiveFormsModule,\n    AsyncPipe,\n    NgOptimizedImage,\n  ],\n  providers: [MatFormFieldModule, MatInputModule],\n})\nexport class AddInventoryFormPageComponent implements OnInit {\n  public roomControl = new FormControl('', Validators.required);\n  public categoryControl = new FormControl('');\n\n  itemName: string = '';\n  quantity: string = '';\n  label: string = '';\n\n  address: any;\n  category: any;\n\n  locations: Location = {} as Location;\n  categories: Category = {} as Category;\n\n  protected options: Location[] = [];\n  protected optionsC: Category[] = [];\n  private apiUrl = environment.apiStockUrl;\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private userService: UserService,\n  ) {}\n\n  getLocation(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + 'location/getAll', {\n      withCredentials: true\n    });\n  }\n\n  getCategories(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + 'category/getAll', {\n      withCredentials: true\n    });\n  }\n\n  ngOnInit() {\n    this.getLocation().subscribe((data) => {\n      this.locations = data;\n      for (const location of data) {\n        const option: Location = {\n          id: location.id,\n          address: location.address,\n          city: location.city,\n          room: location.room,\n        };\n        if (location.room != '') {\n          this.options.push(option);\n        }\n      }\n    },  (error) => {\n      if(error.status === 401) {\n        this.router.navigate(['/'])\n      }\n      throw error;\n    });\n    this.getCategories().subscribe((data) => {\n      this.categories = data;\n      for (const category of data) {\n        const optionC: Category = {\n          id: category.id,\n          label: category.label,\n        };\n        this.optionsC.push(optionC);\n      }\n    },  () => {\n      this.router.navigate(['login'])\n    });\n  }\n\n  toTitleCase(str: string): string {\n    return str\n      .toLowerCase()\n      .split(' ')\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }\n\n  createItem() {\n    const headers = new HttpHeaders().set(\n      'Content-Type',\n      'application/x-www-form-urlencoded',\n    );\n    const itemData = new URLSearchParams();\n    itemData.set('name', this.toTitleCase(this.itemName));\n    itemData.set('location.id', this.address.id);\n    itemData.set('category', this.category.label);\n    itemData.set('quantity', this.quantity);\n    this.http.post(this.apiUrl + 'item/create', itemData, {\n      headers: headers,\n      responseType: 'text',\n      withCredentials: true,\n    })\n    .subscribe(\n      () => {\n        this.router.navigate(['/success'], {\n          queryParams: {\n            text:\n              \"L'item \" +\n              this.toTitleCase(this.itemName) +\n              ' a été ajouté avec succès',\n            link: '/stock',\n          },\n        });\n      },\n      (error) => {\n        if(error.status === 401) {\n          this.router.navigate(['login'])\n        }\n        throw error;\n      }\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AddLocationFormPageComponent",
            "id": "injectable-AddLocationFormPageComponent-e8f590f7f778f3344f8b2cb5a65a0859186f8f804985424e0896dff3de444ac85cbf7e781e6c2847625ce84105da906284489d7c0a703e572f265d8cf6d919a0",
            "file": "src/app/pages/Admin/AddLocationFormPage/AddLocationFormPage.component.ts",
            "properties": [
                {
                    "name": "address",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiStockUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "city",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "room",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methods": [
                {
                    "name": "createLocation",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toTitleCase",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Component, Injectable } from '@angular/core';\nimport { environment } from '../../../../environments/environment';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ButtonComponent } from '../../../components/button/button.component';\nimport {\n  MatError,\n  MatFormField,\n  MatFormFieldModule,\n} from '@angular/material/form-field';\nimport { MatInput, MatInputModule, MatLabel } from '@angular/material/input';\n\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { MatIcon } from '@angular/material/icon';\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-add-location-form-page',\n  standalone: true,\n  templateUrl: './AddLocationFormPage.component.html',\n  styleUrl: './AddLocationFormPage.component.css',\n  imports: [\n    ButtonComponent,\n    CommonModule,\n    MatFormField,\n    MatError,\n    MatInput,\n    MatInputModule,\n    MatLabel,\n    MatFormFieldModule,\n    FormsModule,\n    MatIcon,\n  ],\n})\nexport class AddLocationFormPageComponent {\n  private apiUrl = environment.apiStockUrl;\n  address: string = '';\n  city: string = '';\n  room: string = '';\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n  ) {}\n\n  toTitleCase(str: string): string {\n    return str\n      .toLowerCase()\n      .split(' ')\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }\n\n  createLocation(form: NgForm) {\n    const headers = new HttpHeaders().set(\n      'Content-Type',\n      'application/x-www-form-urlencoded',\n    );\n    const LocationData = new URLSearchParams();\n    LocationData.set('address', this.toTitleCase(this.address));\n    LocationData.set('city', this.toTitleCase(this.city));\n    LocationData.set('room', this.room);\n    if (form.valid) {\n      this.http\n        .post(this.apiUrl + 'location/create', LocationData, {\n          headers: headers,\n          responseType: 'text',\n          withCredentials: true,\n        })\n        .subscribe(\n          () => {\n            this.router.navigate(['/success'], {\n              queryParams: {\n                text:\n                  'Le lieu ' +\n                  this.toTitleCase(this.toTitleCase(this.address)) +\n                  ', ' +\n                  this.toTitleCase(this.city) +\n                  ' a été ajouté avec succès',\n                link: '/location',\n              },\n            });\n          },\n          (error) => {\n            if(error.status === 401) {\n              this.router.navigate(['/']);\n            }\n            throw error;\n          },\n        );\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AddUserFormPageComponent",
            "id": "injectable-AddUserFormPageComponent-875e2b4a19fa1bfae019faa91c85dd26811d2c489b6a13162293ef96f6f65fd1c4f99c4b08cfc92489d373b29a548a25a5acdfc0b665ae190ed746d67d46dd90",
            "file": "src/app/pages/Admin/AddUserFormPage/AddUserFormPage.component.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiUserUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "roles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "roleSelector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "userEmailControl",
                    "defaultValue": "new FormControl('', [\n    Validators.required,\n    Validators.email,\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "userNameControl",
                    "defaultValue": "new FormControl('', Validators.required)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "userSurnameControl",
                    "defaultValue": "new FormControl('', Validators.required)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "userUsernameControl",
                    "defaultValue": "new FormControl('', Validators.required)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Component, Injectable, OnInit } from '@angular/core';\nimport { ButtonComponent } from '../../../components/button/button.component';\nimport { SelectComponent } from '../../../components/select/select.component';\nimport { MatError, MatFormField } from '@angular/material/form-field';\nimport { MatInput, MatLabel } from '@angular/material/input';\nimport { MatOption, MatSelect } from '@angular/material/select';\nimport {\n  FormControl,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { Role } from '../../../interfaces/Role';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../../environments/environment';\nimport { MatIcon } from '@angular/material/icon';\nimport { Router } from \"@angular/router\";\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-AddUserFormPage',\n  standalone: true,\n  imports: [\n    ButtonComponent,\n    SelectComponent,\n    MatError,\n    MatFormField,\n    MatInput,\n    MatSelect,\n    MatOption,\n    MatLabel,\n    FormsModule,\n    ReactiveFormsModule,\n    MatIcon,\n  ],\n  templateUrl: './AddUserFormPage.component.html',\n  styleUrl: './AddUserFormPage.component.css',\n})\nexport class AddUserFormPageComponent implements OnInit {\n  protected roles: Role[] = [];\n  private apiUrl: string = environment.apiUserUrl;\n\n  protected userNameControl = new FormControl('', Validators.required);\n  protected userSurnameControl = new FormControl('', Validators.required);\n  protected userEmailControl = new FormControl('', [\n    Validators.required,\n    Validators.email,\n  ]);\n  protected userUsernameControl = new FormControl('', Validators.required);\n  protected roleSelector: any;\n\n  constructor(private httpClient: HttpClient, private router: Router) {}\n\n  ngOnInit() {\n    this.httpClient\n      .get<Role[]>(this.apiUrl + '/getRoles', { withCredentials: true })\n      .subscribe(\n        (data) => {\n          this.roles = data;\n        },\n        (error) => {\n          if(error.status === 401) {\n            this.router.navigate(['/']);\n          }\n          console.error(error);\n          throw error;\n        }\n      );\n  }\n\n  public submitForm() {\n    if (\n      this.userNameControl.value == null ||\n      this.userSurnameControl.value == null ||\n      this.userEmailControl.value == null ||\n      this.userUsernameControl.value == null\n    ) {\n      console.error('Invalid form');\n      return;\n    }\n    const body = new URLSearchParams();\n    body.set('name', this.userNameControl.value);\n    body.set('surname', this.userSurnameControl.value);\n    body.set('role', this.roleSelector);\n    body.set('username', this.userUsernameControl.value);\n    body.set('email', this.userEmailControl.value);\n\n    const headers = new HttpHeaders().set(\n      'Content-Type',\n      'application/x-www-form-urlencoded',\n    );\n    this.httpClient.post(this.apiUrl + '/addUser', body, {\n      headers,\n      responseType: 'text',\n      withCredentials: true,\n    }).subscribe(null, (error) => {\n      if(error.status === 401) {\n        this.router.navigate(['/']);\n      }\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "IMSListPageComponent",
            "id": "injectable-IMSListPageComponent-2f192b7911c029d0ecb4448ce19b08dc82765d91b72e0abf3b3b66c433c304b477608d5e1ee8cfe623cf6d419547300a1558055bf99c74c08fa1bdf680ffde19",
            "file": "src/app/pages/IMSListPage/IMSListPage.component.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiStockUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "categoriesAvailable",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "filterControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemLocation[]",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "itemsToDisplay",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemLocation[]",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "quantityLimitedItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemLocation[]",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deleteItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "ItemLocation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ItemLocation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "ItemLocation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ItemLocation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "organizeItemsToDisplay",
                    "args": [
                        {
                            "name": "itemStocks",
                            "type": "ItemLocation[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemStocks",
                            "type": "ItemLocation[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleActions",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCategoriesAvailable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateItemsToDisplay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Component, Injectable, OnInit } from '@angular/core';\nimport { catchError, tap } from 'rxjs/operators';\nimport { ButtonComponent } from '../../components/button/button.component';\nimport { CommonModule } from '@angular/common';\nimport { environment } from '../../../environments/environment';\nimport { Router, RouterModule } from '@angular/router';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatIconButton } from '@angular/material/button';\nimport { MatFormField } from '@angular/material/form-field';\nimport { MatInput, MatLabel } from '@angular/material/input';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatOption } from '@angular/material/autocomplete';\nimport { Category } from '../../interfaces/Category';\nimport { MatSelect } from '@angular/material/select';\nimport { ItemLocation } from '../../interfaces/ItemLocation';\nimport { UserService } from '../../services/User.service';\nimport { StockItemComponent } from \"../../components/stockItem/stock-item.component\";\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-imslist-page',\n  standalone: true,\n  templateUrl: './IMSListPage.component.html',\n  styleUrls: ['./IMSListPage.component.css'],\n  imports: [\n    ButtonComponent,\n    CommonModule,\n    RouterModule,\n    MatIcon,\n    MatIconButton,\n    MatFormField,\n    MatInput,\n    MatLabel,\n    FormsModule,\n    MatOption,\n    MatSelect,\n    ReactiveFormsModule,\n    StockItemComponent\n  ]\n})\nexport class IMSListPageComponent implements OnInit {\n  public filterControl = new FormControl();\n  protected items: ItemLocation[] = [];\n  protected categoriesAvailable: Category[] = [];\n  private apiUrl = environment.apiStockUrl;\n\n  protected quantityLimitedItems: ItemLocation[] = [];\n  protected itemsToDisplay: ItemLocation[] = [];\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private userService: UserService,\n  ) {}\n\n  editItem(item: ItemLocation): void {\n    this.router.navigate(['stock/update'], {\n      state: { selectedItem: item },\n    });\n  }\n\n  deleteItem(item: ItemLocation): void {\n    this.http\n      .delete(this.apiUrl + 'item/' + item.id + '/' + item.location_id.id, {\n        withCredentials: true,\n      })\n      .subscribe(() => {\n        this.items = this.items.filter((i) => i.id !== item.id);\n        this.updateCategoriesAvailable();\n        this.updateItemsToDisplay();\n      }, (error) => {\n        if(error.status === 401) {\n          this.router.navigate(['/'])\n        }\n        throw error;\n      })\n  }\n\n  ngOnInit(): void {\n    this.http\n      .get<ItemLocation[]>(this.apiUrl + 'item/getAll', { withCredentials: true })\n      .subscribe(\n        (data) => {\n          this.items = data;\n          this.updateCategoriesAvailable();\n          this.organizeItemsToDisplay();\n        },\n        (error) => {\n          throw error;\n        }\n      );\n  }\n\n  toggleActions(event: MouseEvent): void {\n    const fileElement = (event.currentTarget as HTMLElement).closest('.file');\n    if (fileElement) {\n      fileElement.classList.toggle('show-actions');\n    }\n  }\n\n  updateCategoriesAvailable(): void {\n    const categories: Category[] = [];\n    this.items.forEach((item) => {\n      const cat = item.item_id.category_id;\n      if (!categories.some((existingCat) => existingCat.id === cat.id)) {\n        categories.push(cat);\n      }\n    });\n    this.categoriesAvailable = categories;\n  }\n\n  organizeItemsToDisplay(itemStocks?: ItemLocation[]): void {\n    let consumablesItems: ItemLocation[] = [];\n    let generalItems: ItemLocation[] = [];\n    this.quantityLimitedItems = [];\n    if (!itemStocks) {\n      itemStocks = this.items;\n    }\n    for (const item of itemStocks) {\n      if (['Brochures', 'Goodies'].includes(item.item_id.category_id.label)) {\n        if (item.quantity < 40) {\n          this.quantityLimitedItems.push(item);\n        } else {\n          consumablesItems.push(item);\n        }\n      } else {\n        if (item.item_id.category_id.label == 'Kakémono') {\n          if (item.quantity < 0) {\n            this.quantityLimitedItems.push(item);\n          } else {\n            generalItems.push(item);\n          }\n        } else {\n          generalItems.push(item);\n        }\n      }\n    }\n    this.itemsToDisplay = [\n      ...this.quantityLimitedItems,\n      ...consumablesItems,\n      ...generalItems,\n    ];\n  }\n\n  updateItemsToDisplay(): void {\n    const selectedCategory = this.filterControl.value;\n\n    if (!selectedCategory) {\n      this.organizeItemsToDisplay();\n    } else {\n      this.organizeItemsToDisplay(\n        this.items.filter(\n          (item) => item.item_id.category_id.id === selectedCategory,\n        ),\n      );\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ListCategoryPageComponent",
            "id": "injectable-ListCategoryPageComponent-fdda31e39c2dfefee320ae15dd173637cd3e97c8156b3856ac01913c1d82ca5bd435640039578dd0e1e25e9d4e7ae9aab4965ca5001e58d785fe5ffe3ee17fec",
            "file": "src/app/pages/Admin/ListCategoryPage/ListCategoryPage.component.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiStockUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Component, Injectable, OnInit } from '@angular/core';\nimport { environment } from '../../../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs';\nimport { ButtonComponent } from '../../../components/button/button.component';\nimport { CommonModule } from '@angular/common';\nimport { MatIcon } from '@angular/material/icon';\nimport { Category } from '../../../interfaces/Category';\nimport { Router } from \"@angular/router\";\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-list-category-page',\n  standalone: true,\n  templateUrl: './ListCategoryPage.component.html',\n  styleUrl: './ListCategoryPage.component.css',\n  imports: [ButtonComponent, CommonModule, MatIcon],\n})\nexport class ListCategoryPageComponent implements OnInit {\n  categories: Category[] = [];\n  private apiUrl = environment.apiStockUrl;\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  ngOnInit() {\n    this.http.get<Category[]>(this.apiUrl + 'category/getAll', {\n      withCredentials: true,\n    })\n    .subscribe(\n      (data) => {\n        this.categories = data;\n      },\n      (error) => {\n        if(error.status === 401) {\n          this.router.navigate(['/']);\n        }\n        console.error(error);\n        throw error;\n      }\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LocationListPageComponent",
            "id": "injectable-LocationListPageComponent-a3a05b54891afa5d9d21ffc549e4e6afd18472bfa6bd1f6450af2b0127e8a676b735cd7ef03da06feccc6b2d8271014e3164a38276ad443c1841de93d8866853",
            "file": "src/app/pages/Admin/LocationListPage/LocationListPage.component.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiStockUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "locations",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Location[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [
                {
                    "name": "deleteLocation",
                    "args": [
                        {
                            "name": "location",
                            "type": "Location",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "Location",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editLocation",
                    "args": [
                        {
                            "name": "location",
                            "type": "Location",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "Location",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Component, Injectable, OnInit } from '@angular/core';\nimport { environment } from '../../../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { ButtonComponent } from '../../../components/button/button.component';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { MatIcon } from '@angular/material/icon';\nimport { ConfirmationDialogComponent } from '../../../components/confirmationDialog/confirmationDialog.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Location } from '../../../interfaces/Location';\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-location-list-page',\n  standalone: true,\n  templateUrl: './LocationListPage.component.html',\n  styleUrl: './LocationListPage.component.css',\n  imports: [ButtonComponent, CommonModule, MatIcon],\n})\nexport class LocationListPageComponent implements OnInit {\n  locations: Location[] = [];\n  private apiUrl = environment.apiStockUrl;\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar,\n  ) {}\n\n  ngOnInit() {\n    this.http\n      .get<Location[]>(this.apiUrl + 'location/getAll', {\n        withCredentials: true\n      })\n      .subscribe(\n        (data) => {\n          this.locations = data;\n        },\n        (error) => {\n          if(error.status === 401) {\n            this.router.navigate(['/']);\n          }\n          console.error(error);\n          throw error;\n        }\n      )\n  }\n\n  editLocation(location: Location) {\n    this.router.navigate(['location/update'], {\n      state: { selectedLocation: location },\n    });\n  }\n\n  deleteLocation(location: Location) {\n    const dialogRef = this.dialog.open(ConfirmationDialogComponent);\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        this.http\n          .delete(this.apiUrl + 'location/' + location.id, {\n            responseType: 'text',\n            observe: 'response',\n            withCredentials: true,\n          })\n          .subscribe(\n            (response) => {\n              if (response.status == 204)\n                this.router.navigate(['/success'], {\n                  queryParams: {\n                    text: 'Le lieu a été supprimé avec succès',\n                    link: '/location',\n                  },\n                });\n              else {\n                this.snackBar.open(\n                  'Une erreur est survenue: ' + response.body,\n                  'Fermer',\n                  {\n                    duration: 5000,\n                  },\n                );\n              }\n            },\n            (error) => {\n              if(error.status === 401) {\n                this.router.navigate(['/']);\n              }\n              console.error(error.status);\n              this.snackBar.open(\n                'Une erreur est survenue: ' + error.message,\n                'Fermer',\n                {\n                  duration: 5000,\n                },\n              );\n            },\n          );\n      }\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UpdateEventFormPageComponent",
            "id": "injectable-UpdateEventFormPageComponent-75c777d7768b28465bcfddf614c2087db13c69707fdada4137d91b61bca40e5b45c8e45b70c3a9e382cf1000cbe3eda9be4f6af01792e1c7fb3d3e8eb0f90fec",
            "file": "src/app/pages/UpdateEventFormPage/UpdateEventFormPage.component.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiEventUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "eventAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "eventManager",
                    "defaultValue": "{ id: '', last_name: 'A', first_name: 'Definir' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "eventName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "eventStatus",
                    "defaultValue": "{ id: 0, label: '' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventStatus",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "optionsL",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Location[]",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "optionsM",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Person[]",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "optionsS",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventStatus[]",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "selectedEvent",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methods": [
                {
                    "name": "closeDatepicker",
                    "args": [
                        {
                            "name": "datepicker",
                            "type": "MatDatepicker<Date>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 291,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "datepicker",
                            "type": "MatDatepicker<Date>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "displayFn",
                    "args": [
                        {
                            "name": "location",
                            "type": "Location",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "Location",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayMn",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayS",
                    "args": [
                        {
                            "name": "status",
                            "type": "EventStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "EventStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLocation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPerson",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddressSelected",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOptionSelectedM",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onStatusSelected",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toTitleCase",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateEvent",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Component, Injectable, OnInit } from '@angular/core';\nimport { ButtonComponent } from '../../components/button/button.component';\nimport { SelectComponent } from '../../components/select/select.component';\nimport {\n  MatFormField,\n  MatHint,\n  MatInput,\n  MatInputModule,\n  MatLabel,\n  MatSuffix,\n} from '@angular/material/input';\nimport {\n  MatDatepicker,\n  MatDatepickerModule,\n  MatDatepickerToggle,\n} from '@angular/material/datepicker';\nimport { MatNativeDateModule, MatOption } from '@angular/material/core';\nimport {\n  MatAutocomplete,\n  MatAutocompleteTrigger,\n} from '@angular/material/autocomplete';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatError, MatFormFieldModule } from '@angular/material/form-field';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { AsyncPipe, CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ConfirmationDialogComponent } from '../../components/confirmationDialog/confirmationDialog.component';\nimport { Person } from '../../interfaces/Person';\nimport { Location } from '../../interfaces/Location';\nimport { MatIcon } from '@angular/material/icon';\nimport { EventStatus } from \"../../interfaces/EventStatus\";\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-update-event-form-page',\n  standalone: true,\n  templateUrl: './UpdateEventFormPage.component.html',\n  styleUrl: './UpdateEventFormPage.component.css',\n  imports: [\n    ButtonComponent,\n    SelectComponent,\n    CommonModule,\n    MatInput,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatHint,\n    MatDatepickerToggle,\n    MatDatepicker,\n    MatSuffix,\n    MatLabel,\n    MatFormField,\n    MatAutocomplete,\n    MatOption,\n    FormsModule,\n    ReactiveFormsModule,\n    MatAutocompleteTrigger,\n    MatError,\n    AsyncPipe,\n    MatIcon,\n  ],\n  providers: [MatDatepickerModule, MatInputModule, MatFormFieldModule],\n})\nexport class UpdateEventFormPageComponent implements OnInit {\n  selectedEvent: any = {};\n\n  private apiUrl = environment.apiEventUrl;\n  protected optionsL: Location[] = [];\n  protected optionsS: EventStatus[] = [];\n  protected optionsM: Person[] = [];\n\n  eventName: string = '';\n  eventAddress: any;\n  eventStatus: EventStatus = { id: 0, label: '' };\n  eventManager: Person = { id: '', last_name: 'A', first_name: 'Definir' };\n\n  constructor(\n    private router: Router,\n    private http: HttpClient,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar,\n  ) {\n    const navigation = this.router.getCurrentNavigation();\n    if (navigation && navigation.extras && navigation.extras.state) {\n      this.selectedEvent = navigation.extras.state?.['selectedEvent'];\n      this.eventManager = this.selectedEvent.item_manager;\n    }\n  }\n\n  displayFn(location: Location): string {\n    return location ? `${location.address}, ${location.city}` : '';\n  }\n\n  displayS(status: EventStatus): string {\n    return status ? status.label : '';\n  }\n\n  displayMn(person: Person): string {\n    return person ? `${person.last_name} ${person.first_name}` : '';\n  }\n\n  getPerson(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + 'person/getAll', {\n      withCredentials: true,\n    });\n  }\n\n  getLocation(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + 'location/getAll', {\n      withCredentials: true,\n    });\n  }\n\n  getStatus(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + 'status/getAll', {\n      withCredentials: true,\n    });\n  }\n\n  onAddressSelected(option: any): void {\n    this.eventAddress = option;\n  }\n\n  onStatusSelected(option: any): void {\n    this.eventStatus = option;\n  }\n\n  onOptionSelectedM(option: any): void {\n    this.eventManager = option;\n  }\n\n  toTitleCase(str: string): string {\n    return str\n      .toLowerCase()\n      .split(' ')\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }\n\n  ngOnInit(): void {\n    this.getLocation().subscribe((data) => {\n      for (const location of data) {\n        const option: Location = {\n          id: location.id,\n          address: location.address,\n          city: location.city,\n          room: location.room,\n        };\n        const exists = this.optionsL.some(\n          (opt) => opt.city === option.city && opt.address === option.address,\n        );\n        if (!exists) {\n          this.optionsL.push(option);\n        }\n      }\n    });\n    this.getStatus().subscribe((data) => {\n      for (const stat of data) {\n        const option: EventStatus = {\n          id: stat.id,\n          label: stat.label,\n        };\n        this.optionsS.push(option);\n      }\n    });\n    this.getPerson().subscribe((data) => {\n      for (const person of data) {\n        const option: Person = {\n          id: person.id,\n          last_name: person.last_name,\n          first_name: person.first_name,\n        };\n        const exists = this.optionsM.some(\n          (opt) =>\n            opt.last_name === option.last_name &&\n            opt.first_name === option.first_name,\n        );\n        if (!exists) {\n          this.optionsM.push(option);\n        }\n      }\n    });\n\n    this.eventStatus.label = this.selectedEvent.status;\n    this.eventName = this.selectedEvent.title;\n  }\n\n  updateEvent(form: NgForm) {\n    const headers = new HttpHeaders().set(\n      'Content-Type',\n      'application/x-www-form-urlencoded',\n    );\n    const eventData = new URLSearchParams();\n    eventData.set('name', this.toTitleCase(this.selectedEvent.title));\n    eventData.set(\n      'date_start',\n      this.selectedEvent.date_start?.toDateString() ?? '',\n    );\n    eventData.set(\n      'date_end',\n      this.selectedEvent.date_end?.toDateString() ?? '',\n    );\n    eventData.set('location.id', this.eventAddress.id);\n    eventData.set('status.label', this.eventStatus.label);\n    eventData.set('contact_objective', this.selectedEvent.contact_objective);\n    eventData.set('stand_size', this.selectedEvent.stand_size);\n    eventData.set('item_manager.last_name', this.eventManager.last_name);\n    eventData.set('item_manager.first_name', this.eventManager.first_name);\n    if (form.valid) {\n      this.http\n        .put(this.apiUrl + this.selectedEvent.id, eventData, {\n          headers,\n          responseType: 'text',\n          withCredentials: true,\n        })\n        .subscribe(\n          () => {\n            this.router.navigate(['/success'], {\n              queryParams: {\n                text:\n                  'L évènement ' +\n                  this.toTitleCase(this.eventName) +\n                  ' a été mis à jour avec succès',\n                link: '/event/list',\n              },\n            });\n          },\n          (error) => {\n            if(error.status === 401) {\n              this.router.navigate(['/'])\n            }\n            console.error(error.status);\n          },\n        );\n    }\n  }\n  deleteEvent() {\n    const dialogRef = this.dialog.open(ConfirmationDialogComponent);\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        this.http\n          .delete(this.apiUrl + this.selectedEvent.id, {\n            responseType: 'text',\n            observe: 'response',\n            withCredentials: true,\n          })\n          .subscribe(\n            (response) => {\n              if (response.status == 204)\n                this.router.navigate(['/success'], {\n                  queryParams: {\n                    text:\n                      \"L'évènement \" +\n                      this.toTitleCase(this.eventName) +\n                      ' a été supprimé avec succès',\n                    link: '/event/list',\n                  },\n                });\n              else {\n                this.snackBar.open(\n                  'Une erreur est survenue: ' + response.body,\n                  'Fermer',\n                  {\n                    duration: 5000,\n                  },\n                );\n              }\n            },\n            (error) => {\n              if(error.status === 401) {\n                this.router.navigate(['/'])\n              }\n              this.snackBar.open(\n                'Une erreur est survenue: ' + error.message,\n                'Fermer',\n                {\n                  duration: 5000,\n                },\n              );\n            },\n          );\n      }\n    });\n  }\n\n  public closeDatepicker(datepicker: MatDatepicker<Date>): void {\n    datepicker['_destroyOverlay']();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UpdateLocationFormPageComponent",
            "id": "injectable-UpdateLocationFormPageComponent-677bb231f0a4905876c3d39af93dd181095f95fc6189994b3c91b578f9ef9cadfc069f0d55401ff9aece9437202185b30d04be68d89dd7c75b908fad80831296",
            "file": "src/app/pages/Admin/UpdateLocationFormPage/UpdateLocationFormPage.component.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiStockUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "Location",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "selectedLocation",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methods": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toTitleCase",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateLocation",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Component, Injectable, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  MatError,\n  MatFormField,\n  MatFormFieldModule,\n  MatLabel,\n} from '@angular/material/form-field';\nimport { MatInput, MatInputModule } from '@angular/material/input';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { ButtonComponent } from '../../../components/button/button.component';\nimport { environment } from '../../../../environments/environment';\nimport { MatIcon } from '@angular/material/icon';\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-update-location-form-page',\n  standalone: true,\n  templateUrl: './UpdateLocationFormPage.component.html',\n  styleUrl: './UpdateLocationFormPage.component.css',\n  imports: [\n    ButtonComponent,\n    CommonModule,\n    MatFormField,\n    MatError,\n    MatInput,\n    MatInputModule,\n    MatLabel,\n    MatFormFieldModule,\n    FormsModule,\n    MatIcon,\n  ],\n})\nexport class UpdateLocationFormPageComponent implements OnInit {\n  selectedLocation: any = {};\n  private apiUrl = environment.apiStockUrl;\n  Location: string = '';\n\n  constructor(\n    private router: Router,\n    private http: HttpClient,\n  ) {\n    const navigation = this.router.getCurrentNavigation();\n    if (navigation && navigation.extras && navigation.extras.state) {\n      this.selectedLocation = navigation.extras.state?.['selectedLocation'];\n    }\n  }\n\n  ngOnInit(): void {\n    this.Location = this.selectedLocation.address;\n  }\n\n  toTitleCase(str: string): string {\n    return str\n      .toLowerCase()\n      .split(' ')\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }\n\n  updateLocation(form: NgForm) {\n    const headers = new HttpHeaders().set(\n      'Content-Type',\n      'application/x-www-form-urlencoded',\n    );\n    const LocationData = new URLSearchParams();\n    LocationData.set(\n      'address',\n      this.toTitleCase(this.selectedLocation.address),\n    );\n    LocationData.set('city', this.toTitleCase(this.selectedLocation.city));\n    LocationData.set('room', this.selectedLocation.room);\n    if (form.valid) {\n      this.http\n        .put(\n          this.apiUrl + 'location/' + this.selectedLocation.id,\n          LocationData,\n          {\n            headers,\n            responseType: 'text',\n            withCredentials: true,\n          },\n        )\n        .subscribe(\n          () => {\n            this.router.navigate(['/success'], {\n              queryParams: {\n                text:\n                  'Le lieu ' +\n                  this.toTitleCase(this.selectedLocation.address) +\n                  ', ' +\n                  this.toTitleCase(this.selectedLocation.city) +\n                  ' a été mis à jour avec succès',\n                link: '/location',\n              },\n            });\n          },\n          (error) => {\n            if(error.status === 401) {\n              this.router.navigate(['/'])\n            }\n          },\n        );\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserAdminActivateService",
            "id": "injectable-UserAdminActivateService-1748e79c2c53037a45661b1bf968244403f7f355427472cc1a9da31d4d5b879a0cde69b36228bec5ca641a219d55c5e2f3ab67b20503066d13fe2d601cfe561f",
            "file": "src/app/services/guards/UserAdminActivate.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { UserService } from '../User.service';\nimport { Router } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class UserAdminActivateService {\n  constructor(\n    private userService: UserService,\n    private router: Router,\n  ) {}\n\n  canActivate(): boolean {\n    if (!this.userService.isAdmin()) {\n      this.router.navigate(['login']);\n      return false;\n    }\n    return true;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserListPageComponent",
            "id": "injectable-UserListPageComponent-8920ca5afc45130f72164c8fcf85bf8e27d5bae47eab5d5906acf969252c2414180e65f808b4436e69ea6cb438361d38eeda18fab452b0c48219f09291da13a8",
            "file": "src/app/pages/Admin/UserListPage/UserListPage.component.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiUserUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "filteredOptions",
                    "defaultValue": "new Observable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<UserRolePermission[]>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "searchFieldControl",
                    "defaultValue": "new FormControl<string | UserRolePermission>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "userRoles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "users",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserRolePermission[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methods": [
                {
                    "name": "_filter",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UserRolePermission[]",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "UserRolePermission",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "UserRolePermission",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "UserRolePermission",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "UserRolePermission",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleActions",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Component, Injectable, OnInit } from '@angular/core';\nimport { ButtonComponent } from '../../../components/button/button.component';\nimport { environment } from '../../../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { AsyncPipe, NgFor } from \"@angular/common\";\nimport { Router } from \"@angular/router\";\nimport { MatFormField } from \"@angular/material/form-field\";\nimport { MatInput, MatLabel } from \"@angular/material/input\";\nimport { MatAutocomplete, MatAutocompleteTrigger, MatOption } from \"@angular/material/autocomplete\";\nimport { FormControl, ReactiveFormsModule } from \"@angular/forms\";\nimport { map, Observable } from \"rxjs\";\nimport { Location } from \"../../../interfaces/Location\";\nimport { ConfirmationDialogComponent } from \"../../../components/confirmationDialog/confirmationDialog.component\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\nimport { UserRolePermission } from \"../../../interfaces/UserRolePermission\";\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-UserListPage',\n  standalone: true,\n  imports: [ButtonComponent, MatIconModule, MatButtonModule, NgFor, MatFormField, MatInput, MatAutocomplete, MatOption, MatAutocompleteTrigger, ReactiveFormsModule, AsyncPipe, MatLabel],\n  templateUrl: './UserListPage.component.html',\n  styleUrl: './UserListPage.component.css',\n})\nexport class UserListPageComponent implements OnInit {\n  users: UserRolePermission[] = [];\n  private apiUrl = environment.apiUserUrl;\n  protected searchFieldControl = new FormControl<string | UserRolePermission>('');\n  protected filteredOptions: Observable<UserRolePermission[]> = new Observable();\n  protected userRoles: any[] = [];\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar,\n  ) {}\n\n  private _filter(name: string): UserRolePermission[] {\n    const filterValue = name.toLowerCase();\n    return this.users.filter((option) => {\n      option.user.first_name.toLowerCase().includes(filterValue) || option.user.last_name.toLowerCase().includes(filterValue)\n    });\n  }\n\n  toggleActions(event: MouseEvent): void {\n    const fileElement = (event.currentTarget as HTMLElement).closest('.file');\n    if (fileElement) {\n      fileElement.classList.toggle('show-actions');\n    }\n  }\n\n  ngOnInit() {\n    this.http\n      .get<UserRolePermission[]>(this.apiUrl + 'getAllUsers', { withCredentials: true })\n      .subscribe(\n        (data) => {\n          this.users = data;\n          for(let d of data) {\n            let array: string[] = ['']\n            for(let role of d.roles) {\n              array.push(role.label)\n            }\n            this.userRoles.push(array);\n          }\n        }, (error) => {\n          if(error.status === 401) {\n            this.router.navigate(['/']);\n          }\n        }\n      );\n    this.filteredOptions = this.searchFieldControl.valueChanges.pipe(\n      map(value => {\n        const name = typeof value === \"string\" ? value : value?.user.first_name;\n        return name ? this._filter(name as string): this.users.slice();\n      })\n    )\n  }\n  editUser(user: UserRolePermission) {\n    this.router.navigate(['user/update'], {\n      state: { userToUpdate: user },\n    });\n  }\n\n  deleteUser(user: UserRolePermission) {\n    const dialogRef = this.dialog.open(ConfirmationDialogComponent);\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        this.http\n          .delete(this.apiUrl + 'editUser/' + user.user.id, {\n            responseType: 'text',\n            observe: 'response',\n            withCredentials: true,\n          })\n          .subscribe(\n            (response) => {\n              if (response.status == 204)\n                this.router.navigate(['/success'], {\n                  queryParams: {\n                    text: \"L'utilisateur a été supprimé avec succès\",\n                    link: '/user',\n                  },\n                });\n              else {\n                this.snackBar.open(\n                  'Une erreur est survenue: ' + response.body,\n                  'Fermer',\n                  {\n                    duration: 5000,\n                  },\n                );\n              }\n            },\n            (error) => {\n              if (error.status === 401) {\n                this.router.navigate(['/']);\n              }\n              this.snackBar.open(\n                'Une erreur est survenue: ' + error.message,\n                'Fermer',\n                {\n                  duration: 5000,\n                },\n              );\n            },\n          );\n      }\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserLoggedInActivateService",
            "id": "injectable-UserLoggedInActivateService-8ec746281627e51d115887afcca83749d5a29ed618f07aa5481e24cf777c5a49dc59a8e3415a7638e4ec85d9cce52957a0781cae34039a9eff9e170e62d59758",
            "file": "src/app/services/guards/UserLoggedInActivate.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivateFn,\n  GuardResult,\n  MaybeAsync,\n  Router,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { UserService } from '../User.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UserLoggedInActivateService {\n  constructor(\n    private userService: UserService,\n    private router: Router,\n  ) {}\n\n  canActivate(): boolean {\n    return this.userService.isLoggedIn();\n\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserNotLoggedInActivateService",
            "id": "injectable-UserNotLoggedInActivateService-672008a393a16535c15567f3a88869fb968f3140f13189dcdd438adc8396c010864b414cb9413350cc89f8087189abc52180842ed9f3ca8f91949b34dfc16340",
            "file": "src/app/services/guards/UserNotLoggedInActivate.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { UserService } from '../User.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserNotLoggedInActivateService {\r\n  constructor(\r\n    private userService: UserService,\r\n    private router: Router,\r\n  ) {}\r\n\r\n  canActivate(): boolean {\r\n    if (this.userService.isLoggedIn()) {\r\n      this.router.navigate(['/']);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-d58929500e87dcf90b780a532897100cb0ede23bd3ef0758adfef599b40e54bf4e67b97ebcec3d2d87c2f3eaa323863d15216f2ec345ab43704dcba40b3270c8",
            "file": "src/app/services/User.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiUserUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserRolePermission | undefined",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getUserData",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserName",
                    "args": [],
                    "optional": false,
                    "returnType": "string | void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAdmin",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { Router } from '@angular/router';\nimport { UserRolePermission } from \"../interfaces/UserRolePermission\";\nimport { CookieService } from \"ngx-cookie-service\";\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  private apiUrl: string = environment.apiUserUrl;\n  static user: UserRolePermission | undefined;\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private cookieService: CookieService\n  ) {}\n\n  getUserData(username: string, password: string) {\n    const body = new URLSearchParams();\n    body.append('username', username);\n    body.append('password', password);\n    const headers = new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded');\n\n    this.http\n      .post<UserRolePermission>(`${this.apiUrl}login`, body, {\n        headers: headers,\n        withCredentials: true,\n      })\n      .subscribe((body) => {\n        UserService.user = body;\n        sessionStorage.setItem('jwt', JSON.stringify(body));\n        if (this.isLoggedIn()) {\n          this.router.navigate(['/'])\n        }\n      });\n  }\n\n  getUserName(): string | void {\n    if (UserService.user?.user?.first_name !== undefined) {\n      return UserService.user?.user.first_name;\n    }\n  }\n\n  isLoggedIn(): boolean {\n    if(this.cookieService.check('session')) {\n      if (sessionStorage.getItem('jwt') !== null && !!UserService.user) {\n        UserService.user = JSON.parse(sessionStorage.getItem('jwt') as string);\n        if(UserService.user === null || UserService.user === undefined) {\n          sessionStorage.removeItem('jwt')\n        }\n      }\n      return !!UserService.user;\n    }\n    return false;\n  }\n\n  isAdmin(): boolean {\n    let isAdmin = false;\n    if (this.isLoggedIn()) {\n      UserService.user?.roles.forEach((role): void => {\n        if(role.label.includes('Admin')) {\n          isAdmin = true;\n        }\n      })\n    }\n    return isAdmin;\n  }\n\n  logout() {\n    sessionStorage.removeItem('jwt');\n    this.http.post<string>(`${this.apiUrl}logout`, {}, { withCredentials: true }).subscribe(() => {\n      this.router.navigate(['login']);\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AddCategoryFormComponent",
            "id": "component-AddCategoryFormComponent-34bcdbf8ea0e81c3dd9a18b1bb3ba814ecc56ca9c1cb68b2f58a1238e9d054383ffb652e578ec6e817d98f5f2861c9c4091a187522ead420af92d218c7c243dd",
            "file": "src/app/pages/Admin/AddCategoryForm/AddCategoryForm.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./AddCategoryForm.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiStockUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "categoryFormControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "submitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "MatFormField"
                },
                {
                    "name": "MatError"
                },
                {
                    "name": "MatInput"
                },
                {
                    "name": "MatLabel"
                },
                {
                    "name": "MatOption"
                },
                {
                    "name": "MatSelect"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ButtonComponent } from '../../../components/button/button.component';\nimport { MatError, MatFormField, MatLabel } from '@angular/material/form-field';\nimport { MatInput } from '@angular/material/input';\nimport { MatOption } from '@angular/material/autocomplete';\nimport { MatSelect } from '@angular/material/select';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../../environments/environment';\nimport { MatIcon } from '@angular/material/icon';\nimport { UserService } from '../../../services/User.service';\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: 'app-category-form',\n  standalone: true,\n  imports: [\n    ButtonComponent,\n    MatFormField,\n    MatError,\n    MatInput,\n    MatLabel,\n    MatOption,\n    MatSelect,\n    FormsModule,\n    ReactiveFormsModule,\n    MatIcon,\n  ],\n  templateUrl: './AddCategoryForm.component.html',\n  styleUrl: './AddCategoryForm.component.css',\n})\nexport class AddCategoryFormComponent {\n  protected categoryFormControl = new FormControl('');\n  private apiUrl = environment.apiStockUrl;\n\n  constructor(\n    private http: HttpClient,\n    private userService: UserService,\n    private router: Router,\n  ) {}\n\n  submitForm() {\n    if (this.categoryFormControl.value != null) {\n      const headers = new HttpHeaders().set(\n        'Content-Type',\n        'application/x-www-form-urlencoded',\n      );\n      const categoryData = new URLSearchParams();\n      categoryData.set('label', this.categoryFormControl.value);\n\n      this.http.post(this.apiUrl + 'category/create', categoryData, {\n        headers: headers,\n        responseType: 'text',\n        withCredentials: true,\n      }).subscribe(null,\n        (error) => {\n          if(error.status == 401) {\n            this.router.navigate(['/'])\n          }\n          throw error;\n        }\n      );\n    }\n  }\n}\n",
            "styleUrl": "./AddCategoryForm.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div [className]=\"'header'\">\n  <a\n    href=\"/\"\n    [className]=\"\n      ['w-100', 'left-align', 'color-black', 'mobile-view'].join(' ')\n    \"\n  >\n    <mat-icon fontIcon=\"arrow_back\" />\n  </a>\n  <div [className]=\"'header-container'\">\n    <h2>Ajout d'une catégorie</h2>\n  </div>\n</div>\n<div class=\"container\">\n  <form method=\"post\" (ngSubmit)=\"submitForm()\">\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Label</mat-label>\n      <input\n        matInput\n        placeholder=\"Kakémono\"\n        name=\"categoryNameInput\"\n        required\n        [formControl]=\"categoryFormControl\"\n      />\n      @if (categoryFormControl.hasError(\"required\")) {\n        <mat-error>Le nom de la catégorie est obligatoire</mat-error>\n      }\n    </mat-form-field>\n  </form>\n  <div id=\"actionButtons\">\n    <app-button\n      [solid]=\"true\"\n      [type]=\"'primary'\"\n      label=\"Ajouter la catégorie\"\n      id=\"submit\"\n    />\n  </div>\n</div>\n"
        },
        {
            "name": "AddEventFormPageComponent",
            "id": "component-AddEventFormPageComponent-7d1b0c6ebbc780010ec10f700aa35efe936e8b642f7222a338fd541ccd45d8d61559dca20acbe23c508aec1eef3da2b58b53a5f2ebebea9112167c2495457c65",
            "file": "src/app/pages/AddEventFormPage/AddEventFormPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                }
            ],
            "selector": "app-add-event-form-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./AddEventFormPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiEventUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "eventAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "eventContact",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "eventEndDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "eventManager",
                    "defaultValue": "{ id: '', last_name: 'A', first_name: 'Definir' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "eventName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "eventSize",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "eventStartDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | null",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Location[]",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "optionsM",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Person[]",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDatepicker",
                    "args": [
                        {
                            "name": "datepicker",
                            "type": "MatDatepicker<Date>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "datepicker",
                            "type": "MatDatepicker<Date>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createEvent",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayFn",
                    "args": [
                        {
                            "name": "location",
                            "type": "Location",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "Location",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayMn",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLocation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPerson",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onOptionSelected",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOptionSelectedM",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toTitleCase",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "SelectComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatInput"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatNativeDateModule",
                    "type": "module"
                },
                {
                    "name": "MatHint"
                },
                {
                    "name": "MatDatepickerToggle"
                },
                {
                    "name": "MatDatepicker"
                },
                {
                    "name": "MatSuffix"
                },
                {
                    "name": "MatLabel"
                },
                {
                    "name": "MatFormField"
                },
                {
                    "name": "MatAutocomplete"
                },
                {
                    "name": "MatOption"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatAutocompleteTrigger"
                },
                {
                    "name": "MatError"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injectable, OnInit } from '@angular/core';\nimport { ButtonComponent } from '../../components/button/button.component';\nimport { SelectComponent } from '../../components/select/select.component';\nimport {\n  MatFormField,\n  MatHint,\n  MatInput,\n  MatInputModule,\n  MatLabel,\n  MatSuffix,\n} from '@angular/material/input';\nimport {\n  MatDatepicker,\n  MatDatepickerModule,\n  MatDatepickerToggle,\n} from '@angular/material/datepicker';\nimport { MatNativeDateModule, MatOption } from '@angular/material/core';\nimport {\n  MatAutocomplete,\n  MatAutocompleteTrigger,\n} from '@angular/material/autocomplete';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatError, MatFormFieldModule } from '@angular/material/form-field';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { AsyncPipe, CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { Location } from '../../interfaces/Location';\nimport { Person } from '../../interfaces/Person';\nimport { UserService } from '../../services/User.service';\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-add-event-form-page',\n  standalone: true,\n  templateUrl: './AddEventFormPage.component.html',\n  styleUrl: './AddEventFormPage.component.css',\n  imports: [\n    ButtonComponent,\n    SelectComponent,\n    CommonModule,\n    MatInput,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatHint,\n    MatDatepickerToggle,\n    MatDatepicker,\n    MatSuffix,\n    MatLabel,\n    MatFormField,\n    MatAutocomplete,\n    MatOption,\n    FormsModule,\n    ReactiveFormsModule,\n    MatAutocompleteTrigger,\n    MatError,\n    AsyncPipe,\n  ],\n  providers: [MatDatepickerModule, MatInputModule, MatFormFieldModule],\n})\nexport class AddEventFormPageComponent implements OnInit {\n  eventName: string = '';\n  eventStartDate: Date | null = null;\n  eventEndDate: Date | null = null;\n  eventAddress: any;\n  eventManager: Person = { id: '', last_name: 'A', first_name: 'Definir' };\n  eventSize: string = '';\n  eventContact: string = '';\n  private apiUrl = environment.apiEventUrl;\n  protected options: Location[] = [];\n  protected optionsM: Person[] = [];\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n  ) {}\n\n  getLocation(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + 'location/getAll', {\n      withCredentials: true,\n    });\n  }\n\n  getPerson(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + 'person/getAll', {\n      withCredentials: true,\n    });\n  }\n\n  ngOnInit(): void {\n    this.getLocation().subscribe((data) => {\n      for (const location of data) {\n        const option: Location = {\n          id: location.id,\n          address: location.address,\n          city: location.city,\n          room: location.room,\n        };\n        const exists = this.options.some(\n          (opt) => opt.city === option.city && opt.address === option.address,\n        );\n        if (!exists) {\n          this.options.push(option);\n        }\n      }\n    }, (error) => {\n      if(error.status === 401) {\n        this.router.navigate(['login'])\n      }\n    });\n    this.getPerson().subscribe((data) => {\n      for (const person of data) {\n        const option: Person = {\n          id: person.id,\n          last_name: person.last_name,\n          first_name: person.first_name,\n        };\n        const exists = this.optionsM.some(\n          (opt) =>\n            opt.last_name === option.last_name &&\n            opt.first_name === option.first_name,\n        );\n        if (!exists) {\n          this.optionsM.push(option);\n        }\n      }\n    }, (error) => {\n      if(error.status === 401) {\n        this.router.navigate(['login'])\n      }\n    });\n  }\n\n  toTitleCase(str: string): string {\n    return str\n      .toLowerCase()\n      .split(' ')\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }\n\n  displayFn(location: Location): string {\n    return location ? `${location.address}, ${location.city}` : '';\n  }\n\n  displayMn(person: Person): string {\n    return person ? `${person.last_name} ${person.first_name}` : '';\n  }\n\n  onOptionSelected(option: any): void {\n    this.eventAddress = option;\n  }\n\n  onOptionSelectedM(option: any): void {\n    this.eventManager = option;\n  }\n\n  createEvent(form: NgForm) {\n    const headers = new HttpHeaders().set(\n      'Content-Type',\n      'application/x-www-form-urlencoded',\n    );\n\n    const eventData = new URLSearchParams();\n    eventData.set('name', this.toTitleCase(this.eventName));\n    eventData.set('date_start', this.eventStartDate?.toDateString() ?? '');\n    eventData.set('date_end', this.eventEndDate?.toDateString() ?? '');\n    eventData.set('stand_size', this.eventSize);\n    eventData.set('contact_objective', this.eventContact);\n    eventData.set('location.id', this.eventAddress.id);\n    eventData.set('item_manager.last_name', this.eventManager.last_name);\n    eventData.set('item_manager.first_name', this.eventManager.first_name);\n    if (form.valid) {\n      this.http\n        .post(this.apiUrl + 'create', eventData, {\n          headers: headers,\n          responseType: 'text',\n          withCredentials: true,\n        })\n        .subscribe(\n          () => {\n            this.router.navigate(['/success'], {\n              queryParams: {\n                text:\n                  \"L'évènement \" +\n                  this.toTitleCase(this.eventName) +\n                  ' a été ajouté avec succès',\n                link: '/event/list',\n              },\n            });\n          },\n          (error) => {\n            if(error.status === 401) {\n              this.router.navigate(['login'])\n            }\n            console.error(error.status);\n          },\n        );\n    }\n  }\n\n  public closeDatepicker(datepicker: MatDatepicker<Date>): void {\n    datepicker['_destroyOverlay']();\n  }\n}\n",
            "styleUrl": "./AddEventFormPage.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [className]=\"'header'\">\n  <a href=\"/\" [className]=\"['w-100', 'left-align']\">\n    <i class=\"fa-solid fa-arrow-left\"></i>\n  </a>\n  <div [className]=\"'header-container'\">\n    <h2>Créer un événement</h2>\n  </div>\n</div>\n\n<div [className]=\"'container m-0 mb-mobile'\">\n  <form (ngSubmit)=\"createEvent(eventForm)\" method=\"post\" #eventForm=\"ngForm\">\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Nom de l'événement</mat-label>\n      <input\n        type=\"text\"\n        matInput\n        id=\"event_name_input\"\n        name=\"event_name\"\n        [(ngModel)]=\"eventName\"\n        required\n      />\n      <mat-error> Le nom de l'événement ne peut pas être vide.</mat-error>\n    </mat-form-field>\n\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Choisir une date de début</mat-label>\n      <input\n        matInput\n        [matDatepicker]=\"pickerStart\"\n        (dateChange)=\"closeDatepicker(pickerStart)\"\n        required\n        [(ngModel)]=\"eventStartDate\"\n        name=\"eventStartDate\"\n      />\n      <mat-hint>DD/MM/YYYY</mat-hint>\n      <mat-datepicker-toggle\n        matIconSuffix\n        [for]=\"pickerStart\"\n      ></mat-datepicker-toggle>\n      <mat-datepicker #pickerStart></mat-datepicker>\n      <mat-error>La date de début ne peut pas être vide.</mat-error>\n    </mat-form-field>\n\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Choisir une date de fin</mat-label>\n      <input\n        matInput\n        [matDatepicker]=\"pickerEnd\"\n        (dateChange)=\"closeDatepicker(pickerEnd)\"\n        required\n        [(ngModel)]=\"eventEndDate\"\n        name=\"eventEndDate\"\n      />\n      <mat-hint>DD/MM/YYYY</mat-hint>\n      <mat-datepicker-toggle\n        matIconSuffix\n        [for]=\"pickerEnd\"\n      ></mat-datepicker-toggle>\n      <mat-datepicker #pickerEnd></mat-datepicker>\n      <mat-error>La date de fin ne peut pas être vide.</mat-error>\n    </mat-form-field>\n\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Adresse</mat-label>\n      <input\n        type=\"text\"\n        placeholder=\"Rechercher une adresse\"\n        aria-label=\"Adresse\"\n        name=\"event_address\"\n        matInput\n        [(ngModel)]=\"eventAddress\"\n        [matAutocomplete]=\"auto\"\n        required\n      />\n      <mat-autocomplete\n        #auto=\"matAutocomplete\"\n        [displayWith]=\"displayFn\"\n        (optionSelected)=\"onOptionSelected($event.option.value)\"\n      >\n        @for (option of options; track option) {\n          <mat-option [value]=\"option\">\n            {{ option.address }}, {{ option.city }}\n          </mat-option>\n        }\n      </mat-autocomplete>\n      <mat-error>L'adresse ne peut pas être vide.</mat-error>\n    </mat-form-field>\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Taille du stand</mat-label>\n      <input\n        type=\"text\"\n        matInput\n        id=\"stand_size_input\"\n        name=\"stand_size\"\n        [(ngModel)]=\"eventSize\"\n      />\n    </mat-form-field>\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Objectif contact</mat-label>\n      <input\n        type=\"text\"\n        matInput\n        id=\"contact_objective_input\"\n        name=\"contact_objective\"\n        [(ngModel)]=\"eventContact\"\n      />\n    </mat-form-field>\n\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Manager</mat-label>\n      <input\n        type=\"text\"\n        placeholder=\"Rechercher un manager\"\n        aria-label=\"Manager\"\n        name=\"event_manager\"\n        matInput\n        [matAutocomplete]=\"autoM\"\n      />\n      <mat-autocomplete\n        #autoM=\"matAutocomplete\"\n        [displayWith]=\"displayMn\"\n        (optionSelected)=\"onOptionSelectedM($event.option.value)\"\n      >\n        @for (option of optionsM; track option) {\n          <mat-option [value]=\"option\">\n            {{ option.last_name }} {{ option.first_name }}\n          </mat-option>\n        }\n      </mat-autocomplete>\n    </mat-form-field>\n\n    <app-button\n      [solid]=\"true\"\n      [type]=\"'primary'\"\n      label=\"Créer l'événement\"\n      id=\"submit\"\n    />\n  </form>\n</div>\n"
        },
        {
            "name": "AddInventoryFormPageComponent",
            "id": "component-AddInventoryFormPageComponent-dc0151073e9b8d56d572fdade08360621d76248b134074702ef8163e4c9dc7cf687cebe615563749b34eb41e52f3e80d1bc92f1abd70173f0cd889d4a1622200",
            "file": "src/app/pages/AddInventoryFormPage/AddInventoryFormPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                }
            ],
            "selector": "app-add-inventory-form-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./AddInventoryFormPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiStockUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "categories",
                    "defaultValue": "{} as Category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "categoryControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "itemName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "locations",
                    "defaultValue": "{} as Location",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Location",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Location[]",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "optionsC",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "quantity",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "roomControl",
                    "defaultValue": "new FormControl('', Validators.required)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLocation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toTitleCase",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "SelectComponent",
                    "type": "component"
                },
                {
                    "name": "MatFormField"
                },
                {
                    "name": "MatInput"
                },
                {
                    "name": "MatLabel"
                },
                {
                    "name": "MatError"
                },
                {
                    "name": "MatSelect"
                },
                {
                    "name": "MatOption"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "NgOptimizedImage"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injectable, OnInit } from '@angular/core';\nimport { ButtonComponent } from '../../components/button/button.component';\nimport { SelectComponent } from '../../components/select/select.component';\nimport {\n  MatError,\n  MatFormField,\n  MatFormFieldModule,\n} from '@angular/material/form-field';\nimport { MatInput, MatInputModule, MatLabel } from '@angular/material/input';\nimport { MatOption, MatSelect } from '@angular/material/select';\nimport {\n  FormControl,\n  ReactiveFormsModule,\n  FormsModule,\n  Validators,\n} from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { AsyncPipe, NgOptimizedImage } from '@angular/common';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { Router } from '@angular/router';\nimport { Location } from '../../interfaces/Location';\nimport { Category } from '../../interfaces/Category';\nimport { UserService } from '../../services/User.service';\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-add-inventory-form-page',\n  standalone: true,\n  templateUrl: './AddInventoryFormPage.component.html',\n  styleUrl: './AddInventoryFormPage.component.css',\n  imports: [\n    ButtonComponent,\n    SelectComponent,\n    MatFormField,\n    MatInput,\n    MatLabel,\n    MatError,\n    MatSelect,\n    MatOption,\n    FormsModule,\n    ReactiveFormsModule,\n    AsyncPipe,\n    NgOptimizedImage,\n  ],\n  providers: [MatFormFieldModule, MatInputModule],\n})\nexport class AddInventoryFormPageComponent implements OnInit {\n  public roomControl = new FormControl('', Validators.required);\n  public categoryControl = new FormControl('');\n\n  itemName: string = '';\n  quantity: string = '';\n  label: string = '';\n\n  address: any;\n  category: any;\n\n  locations: Location = {} as Location;\n  categories: Category = {} as Category;\n\n  protected options: Location[] = [];\n  protected optionsC: Category[] = [];\n  private apiUrl = environment.apiStockUrl;\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private userService: UserService,\n  ) {}\n\n  getLocation(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + 'location/getAll', {\n      withCredentials: true\n    });\n  }\n\n  getCategories(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + 'category/getAll', {\n      withCredentials: true\n    });\n  }\n\n  ngOnInit() {\n    this.getLocation().subscribe((data) => {\n      this.locations = data;\n      for (const location of data) {\n        const option: Location = {\n          id: location.id,\n          address: location.address,\n          city: location.city,\n          room: location.room,\n        };\n        if (location.room != '') {\n          this.options.push(option);\n        }\n      }\n    },  (error) => {\n      if(error.status === 401) {\n        this.router.navigate(['/'])\n      }\n      throw error;\n    });\n    this.getCategories().subscribe((data) => {\n      this.categories = data;\n      for (const category of data) {\n        const optionC: Category = {\n          id: category.id,\n          label: category.label,\n        };\n        this.optionsC.push(optionC);\n      }\n    },  () => {\n      this.router.navigate(['login'])\n    });\n  }\n\n  toTitleCase(str: string): string {\n    return str\n      .toLowerCase()\n      .split(' ')\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }\n\n  createItem() {\n    const headers = new HttpHeaders().set(\n      'Content-Type',\n      'application/x-www-form-urlencoded',\n    );\n    const itemData = new URLSearchParams();\n    itemData.set('name', this.toTitleCase(this.itemName));\n    itemData.set('location.id', this.address.id);\n    itemData.set('category', this.category.label);\n    itemData.set('quantity', this.quantity);\n    this.http.post(this.apiUrl + 'item/create', itemData, {\n      headers: headers,\n      responseType: 'text',\n      withCredentials: true,\n    })\n    .subscribe(\n      () => {\n        this.router.navigate(['/success'], {\n          queryParams: {\n            text:\n              \"L'item \" +\n              this.toTitleCase(this.itemName) +\n              ' a été ajouté avec succès',\n            link: '/stock',\n          },\n        });\n      },\n      (error) => {\n        if(error.status === 401) {\n          this.router.navigate(['login'])\n        }\n        throw error;\n      }\n    );\n  }\n}\n",
            "styleUrl": "./AddInventoryFormPage.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [className]=\"'header'\">\n  <a href=\"/\" [className]=\"['w-100', 'left-align']\">\n    <i class=\"fa-solid fa-arrow-left\"></i>\n  </a>\n  <div [className]=\"'header-container'\">\n    <h2>Formulaire d'inventaire</h2>\n  </div>\n</div>\n<div [className]=\"'container'\">\n  <img\n    ngSrc=\"assets/img/logos/logo-inventaire.png\"\n    alt=\"logo inventaire\"\n    [className]=\"'mt-2 align-center'\"\n    height=\"300\"\n    width=\"300\"\n    priority\n  />\n\n  <form (ngSubmit)=\"createItem()\" method=\"post\" #itemForm=\"ngForm\">\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Matériel</mat-label>\n      <input\n        type=\"text\"\n        matInput\n        id=\"material_select\"\n        name=\"material\"\n        placeholder=\"Nom du matériel\"\n        [(ngModel)]=\"itemName\"\n        required\n      />\n      <mat-error>Le nom du matériel ne peut pas être vide.</mat-error>\n    </mat-form-field>\n\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Salle</mat-label>\n      <mat-select\n        id=\"room_select\"\n        [(value)]=\"address\"\n        required\n        [formControl]=\"roomControl\"\n      >\n        @for (option of options; track option) {\n          <mat-option [value]=\"option\">\n            {{ option.room }}\n          </mat-option>\n        }\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Categorie</mat-label>\n      <mat-select\n        id=\"category_select\"\n        [(value)]=\"category\"\n        required\n        [formControl]=\"categoryControl\"\n      >\n        @for (category of optionsC; track category) {\n          <mat-option [value]=\"category\">\n            {{ category.label }}\n          </mat-option>\n        }\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Quantité</mat-label>\n      <input\n        type=\"number\"\n        matInput\n        id=\"quantity_input\"\n        name=\"quantity\"\n        [(ngModel)]=\"quantity\"\n        placeholder=\"Nouvelle quantité disponible\"\n        min=\"1\"\n        required\n      />\n      <mat-error>La quantité ne peut pas être inférieure à 1.</mat-error>\n    </mat-form-field>\n\n    <app-button\n      [solid]=\"true\"\n      [type]=\"'primary'\"\n      label=\"Mettre à jour\"\n      id=\"submit\"\n      [disabled]=\"!itemForm.form.valid\"\n    />\n  </form>\n</div>\n"
        },
        {
            "name": "AddLocationFormPageComponent",
            "id": "component-AddLocationFormPageComponent-e8f590f7f778f3344f8b2cb5a65a0859186f8f804985424e0896dff3de444ac85cbf7e781e6c2847625ce84105da906284489d7c0a703e572f265d8cf6d919a0",
            "file": "src/app/pages/Admin/AddLocationFormPage/AddLocationFormPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-location-form-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./AddLocationFormPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "address",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiStockUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "city",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "room",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "createLocation",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toTitleCase",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormField"
                },
                {
                    "name": "MatError"
                },
                {
                    "name": "MatInput"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatLabel"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injectable } from '@angular/core';\nimport { environment } from '../../../../environments/environment';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ButtonComponent } from '../../../components/button/button.component';\nimport {\n  MatError,\n  MatFormField,\n  MatFormFieldModule,\n} from '@angular/material/form-field';\nimport { MatInput, MatInputModule, MatLabel } from '@angular/material/input';\n\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { MatIcon } from '@angular/material/icon';\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-add-location-form-page',\n  standalone: true,\n  templateUrl: './AddLocationFormPage.component.html',\n  styleUrl: './AddLocationFormPage.component.css',\n  imports: [\n    ButtonComponent,\n    CommonModule,\n    MatFormField,\n    MatError,\n    MatInput,\n    MatInputModule,\n    MatLabel,\n    MatFormFieldModule,\n    FormsModule,\n    MatIcon,\n  ],\n})\nexport class AddLocationFormPageComponent {\n  private apiUrl = environment.apiStockUrl;\n  address: string = '';\n  city: string = '';\n  room: string = '';\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n  ) {}\n\n  toTitleCase(str: string): string {\n    return str\n      .toLowerCase()\n      .split(' ')\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }\n\n  createLocation(form: NgForm) {\n    const headers = new HttpHeaders().set(\n      'Content-Type',\n      'application/x-www-form-urlencoded',\n    );\n    const LocationData = new URLSearchParams();\n    LocationData.set('address', this.toTitleCase(this.address));\n    LocationData.set('city', this.toTitleCase(this.city));\n    LocationData.set('room', this.room);\n    if (form.valid) {\n      this.http\n        .post(this.apiUrl + 'location/create', LocationData, {\n          headers: headers,\n          responseType: 'text',\n          withCredentials: true,\n        })\n        .subscribe(\n          () => {\n            this.router.navigate(['/success'], {\n              queryParams: {\n                text:\n                  'Le lieu ' +\n                  this.toTitleCase(this.toTitleCase(this.address)) +\n                  ', ' +\n                  this.toTitleCase(this.city) +\n                  ' a été ajouté avec succès',\n                link: '/location',\n              },\n            });\n          },\n          (error) => {\n            if(error.status === 401) {\n              this.router.navigate(['/']);\n            }\n            throw error;\n          },\n        );\n    }\n  }\n}\n",
            "styleUrl": "./AddLocationFormPage.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div [className]=\"'header'\">\n  <a\n    href=\"/\"\n    [className]=\"\n      ['w-100', 'left-align', 'color-black', 'mobile-view'].join(' ')\n    \"\n  >\n    <mat-icon fontIcon=\"arrow_back\" />\n  </a>\n  <div [className]=\"'header-container'\">\n    <h2>Nouveau lieu</h2>\n  </div>\n\n  <form\n    (ngSubmit)=\"createLocation(locationForm)\"\n    method=\"post\"\n    #locationForm=\"ngForm\"\n  >\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Adresse</mat-label>\n      <input\n        type=\"text\"\n        matInput\n        name=\"address\"\n        placeholder=\"Adresse\"\n        [(ngModel)]=\"address\"\n        required\n      />\n      <mat-error>L'adresse ne peut pas être vide.</mat-error>\n    </mat-form-field>\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Ville</mat-label>\n      <input\n        type=\"text\"\n        matInput\n        name=\"city\"\n        placeholder=\"Nom de la ville\"\n        [(ngModel)]=\"city\"\n        required\n      />\n      <mat-error>La ville ne peut pas être vide.</mat-error>\n    </mat-form-field>\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Salle</mat-label>\n      <input\n        type=\"text\"\n        matInput\n        name=\"room\"\n        placeholder=\"Numéro de salle\"\n        [(ngModel)]=\"room\"\n      />\n    </mat-form-field>\n\n    <app-button [solid]=\"true\" [type]=\"'primary'\" label=\"Créer\" id=\"submit\" />\n  </form>\n</div>\n"
        },
        {
            "name": "AddUserFormPageComponent",
            "id": "component-AddUserFormPageComponent-875e2b4a19fa1bfae019faa91c85dd26811d2c489b6a13162293ef96f6f65fd1c4f99c4b08cfc92489d373b29a548a25a5acdfc0b665ae190ed746d67d46dd90",
            "file": "src/app/pages/Admin/AddUserFormPage/AddUserFormPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-AddUserFormPage",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./AddUserFormPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiUserUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "roles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "roleSelector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "userEmailControl",
                    "defaultValue": "new FormControl('', [\n    Validators.required,\n    Validators.email,\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "userNameControl",
                    "defaultValue": "new FormControl('', Validators.required)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "userSurnameControl",
                    "defaultValue": "new FormControl('', Validators.required)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "userUsernameControl",
                    "defaultValue": "new FormControl('', Validators.required)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "SelectComponent",
                    "type": "component"
                },
                {
                    "name": "MatError"
                },
                {
                    "name": "MatFormField"
                },
                {
                    "name": "MatInput"
                },
                {
                    "name": "MatSelect"
                },
                {
                    "name": "MatOption"
                },
                {
                    "name": "MatLabel"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injectable, OnInit } from '@angular/core';\nimport { ButtonComponent } from '../../../components/button/button.component';\nimport { SelectComponent } from '../../../components/select/select.component';\nimport { MatError, MatFormField } from '@angular/material/form-field';\nimport { MatInput, MatLabel } from '@angular/material/input';\nimport { MatOption, MatSelect } from '@angular/material/select';\nimport {\n  FormControl,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { Role } from '../../../interfaces/Role';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../../environments/environment';\nimport { MatIcon } from '@angular/material/icon';\nimport { Router } from \"@angular/router\";\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-AddUserFormPage',\n  standalone: true,\n  imports: [\n    ButtonComponent,\n    SelectComponent,\n    MatError,\n    MatFormField,\n    MatInput,\n    MatSelect,\n    MatOption,\n    MatLabel,\n    FormsModule,\n    ReactiveFormsModule,\n    MatIcon,\n  ],\n  templateUrl: './AddUserFormPage.component.html',\n  styleUrl: './AddUserFormPage.component.css',\n})\nexport class AddUserFormPageComponent implements OnInit {\n  protected roles: Role[] = [];\n  private apiUrl: string = environment.apiUserUrl;\n\n  protected userNameControl = new FormControl('', Validators.required);\n  protected userSurnameControl = new FormControl('', Validators.required);\n  protected userEmailControl = new FormControl('', [\n    Validators.required,\n    Validators.email,\n  ]);\n  protected userUsernameControl = new FormControl('', Validators.required);\n  protected roleSelector: any;\n\n  constructor(private httpClient: HttpClient, private router: Router) {}\n\n  ngOnInit() {\n    this.httpClient\n      .get<Role[]>(this.apiUrl + '/getRoles', { withCredentials: true })\n      .subscribe(\n        (data) => {\n          this.roles = data;\n        },\n        (error) => {\n          if(error.status === 401) {\n            this.router.navigate(['/']);\n          }\n          console.error(error);\n          throw error;\n        }\n      );\n  }\n\n  public submitForm() {\n    if (\n      this.userNameControl.value == null ||\n      this.userSurnameControl.value == null ||\n      this.userEmailControl.value == null ||\n      this.userUsernameControl.value == null\n    ) {\n      console.error('Invalid form');\n      return;\n    }\n    const body = new URLSearchParams();\n    body.set('name', this.userNameControl.value);\n    body.set('surname', this.userSurnameControl.value);\n    body.set('role', this.roleSelector);\n    body.set('username', this.userUsernameControl.value);\n    body.set('email', this.userEmailControl.value);\n\n    const headers = new HttpHeaders().set(\n      'Content-Type',\n      'application/x-www-form-urlencoded',\n    );\n    this.httpClient.post(this.apiUrl + '/addUser', body, {\n      headers,\n      responseType: 'text',\n      withCredentials: true,\n    }).subscribe(null, (error) => {\n      if(error.status === 401) {\n        this.router.navigate(['/']);\n      }\n    });\n  }\n}\n",
            "styleUrl": "./AddUserFormPage.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [className]=\"'header'\">\n  <a\n    href=\"/\"\n    [className]=\"\n      ['w-100', 'left-align', 'color-black', 'mobile-view'].join(' ')\n    \"\n  >\n    <mat-icon fontIcon=\"arrow_back\" />\n  </a>\n  <div [className]=\"'header-container'\">\n    <h2>Ajout d'utilisateur</h2>\n  </div>\n</div>\n<div class=\"container\">\n  <form method=\"post\" (ngSubmit)=\"submitForm()\">\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Prénom</mat-label>\n      <input\n        matInput\n        placeholder=\"Antoine\"\n        name=\"nameInput\"\n        required\n        [formControl]=\"userNameControl\"\n      />\n      @if (userNameControl.hasError(\"required\")) {\n        <mat-error>Le prénom est obligatoire</mat-error>\n      }\n    </mat-form-field>\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Nom</mat-label>\n      <input\n        matInput\n        placeholder=\"Dupont\"\n        name=\"surnameInput\"\n        required\n        [formControl]=\"userSurnameControl\"\n      />\n      @if (userSurnameControl.hasError(\"required\")) {\n        <mat-error>Le nom est obligatoire</mat-error>\n      }\n    </mat-form-field>\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Nom d'utilisateur</mat-label>\n      <input\n        matInput\n        placeholder=\"antoine.dupont\"\n        name=\"usernameInput\"\n        required\n        [formControl]=\"userUsernameControl\"\n      />\n      @if (userUsernameControl.hasError(\"required\")) {\n        <mat-error>Le nom d'utilisateur est obligatoire</mat-error>\n      }\n    </mat-form-field>\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Rôle</mat-label>\n      <mat-select [(value)]=\"roleSelector\" required multiple>\n        @for (role of roles; track role) {\n          <mat-option value=\"{{ role.id }}\">{{ role.label }}</mat-option>\n        }\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Email</mat-label>\n      <input\n        type=\"email\"\n        matInput\n        placeholder=\"antoine.dupont@isen.fr\"\n        name=\"emailInput\"\n        required\n        [formControl]=\"userEmailControl\"\n      />\n      @if (userSurnameControl.hasError(\"required\")) {\n        <mat-error>L'adresse mail est obligatoire</mat-error>\n      }\n      @if (userSurnameControl.hasError(\"email\")) {\n        <mat-error>Veuillez renseigner une adresse mail valide</mat-error>\n      }\n    </mat-form-field>\n  </form>\n  <div id=\"actionButtons\">\n    <app-button\n      [solid]=\"true\"\n      [type]=\"'primary'\"\n      label=\"Ajouter l'utilisateur\"\n      id=\"submit\"\n    />\n  </div>\n</div>\n"
        },
        {
            "name": "AdminNavbarComponent",
            "id": "component-AdminNavbarComponent-f3d330b308b93e19a01da936d10ebf5dbb80e95b2a980225277e36159bc62fb7718a64670c31ac56f66598b7d929401bc51e662199b8c8798149c86c8cc49b41",
            "file": "src/app/components/adminNavbar/adminNavbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-navbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./adminNavbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sidenavWidth",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "decrease",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "increase",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatSidenav"
                },
                {
                    "name": "MatSidenavContainer"
                },
                {
                    "name": "MatDrawerContainer"
                },
                {
                    "name": "MatTree"
                },
                {
                    "name": "MatNestedTreeNode"
                },
                {
                    "name": "NgStyle"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { MatDrawerContainer, MatSidenav, MatSidenavContainer } from \"@angular/material/sidenav\";\r\nimport { MatNestedTreeNode, MatTree } from \"@angular/material/tree\";\r\nimport { NgStyle } from \"@angular/common\";\r\n\r\n@Component({\r\n  selector: 'app-admin-navbar',\r\n  standalone: true,\r\n  imports: [\r\n    MatSidenav,\r\n    MatSidenavContainer,\r\n    MatDrawerContainer,\r\n    MatTree,\r\n    MatNestedTreeNode,\r\n    NgStyle\r\n  ],\r\n  templateUrl: './adminNavbar.component.html',\r\n  styleUrl: './adminNavbar.component.css'\r\n})\r\nexport class AdminNavbarComponent {\r\n  sidenavWidth = 4;\r\n  increase() {\r\n    this.sidenavWidth = 15;\r\n    console.log('increase sidenav width');\r\n  }\r\n  decrease() {\r\n    this.sidenavWidth = 4;\r\n    console.log('decrease sidenav width');\r\n  }\r\n}\r\n",
            "styleUrl": "./adminNavbar.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-drawer-container [className]=\"'adminNavbar'\" [ngStyle]=\"{ 'width.em': sidenavWidth }\" (mouseenter)=\"increase()\" (mouseleave)=\"decrease()\">\r\n  <mat-drawer #drawer [className]=\"'sidenav'\" mode=\"side\">\r\n    <mat-tree>\r\n      <mat-nested-tree-node>\r\n        Catégorie\r\n        <mat-nested-tree-node>\r\n          Créer\r\n        </mat-nested-tree-node>\r\n        <mat-nested-tree-node>\r\n          Lister\r\n        </mat-nested-tree-node>\r\n      </mat-nested-tree-node>\r\n      <mat-nested-tree-node>\r\n        Evénement\r\n        <mat-nested-tree-node>\r\n          Créer\r\n        </mat-nested-tree-node>\r\n        <mat-nested-tree-node>\r\n          Lister\r\n        </mat-nested-tree-node>\r\n      </mat-nested-tree-node>\r\n      <mat-nested-tree-node>\r\n        Matériel\r\n        <mat-nested-tree-node>\r\n          Créer\r\n        </mat-nested-tree-node>\r\n        <mat-nested-tree-node>\r\n          Lister\r\n        </mat-nested-tree-node>\r\n      </mat-nested-tree-node>\r\n      <mat-nested-tree-node>\r\n        Utilisateur\r\n        <mat-nested-tree-node>\r\n          Créer\r\n        </mat-nested-tree-node>\r\n        <mat-nested-tree-node>\r\n          Lister\r\n        </mat-nested-tree-node>\r\n      </mat-nested-tree-node>\r\n    </mat-tree>\r\n  </mat-drawer>\r\n</mat-drawer-container>\r\n"
        },
        {
            "name": "AdminPageComponent",
            "id": "component-AdminPageComponent-aa2c44c9c869418ba612c97cc9ccadc1099a1bbd66c7456a350182ac336e99d8fc7db51dfd59a6882228e72e0c1ea544fc136b36cca9ea4f1a3916548da74e3c",
            "file": "src/app/pages/Admin/AdminPage/AdminPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-AdminPage",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./AdminPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ButtonComponent } from '../../../components/button/button.component';\nimport { NgOptimizedImage } from '@angular/common';\nimport { MatIcon } from '@angular/material/icon';\n\n@Component({\n  selector: 'app-AdminPage',\n  standalone: true,\n  imports: [ButtonComponent, NgOptimizedImage, MatIcon],\n  templateUrl: './AdminPage.component.html',\n  styleUrl: './AdminPage.component.css',\n})\nexport class AdminPageComponent {}\n",
            "styleUrl": "./AdminPage.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div [className]=\"'header'\">\n  <a\n    href=\"/\"\n    [className]=\"\n      ['w-100', 'left-align', 'color-black', 'mobile-view'].join(' ')\n    \"\n  >\n    <mat-icon fontIcon=\"arrow_back\" />\n  </a>\n  <div [className]=\"'header-container'\">\n    <h2>Espace administrateur</h2>\n    <img\n      ngSrc=\"../../../../assets/img/logos/logo-admin.png\"\n      alt=\"logo adminstrateur\"\n      class=\"mt-2\"\n      height=\"300\"\n      width=\"300\"\n      priority\n    />\n  </div>\n</div>\n<div [className]=\"'container'\">\n  <div id=\"actionButtons\">\n    <app-button\n      type=\"primary\"\n      label=\"Gestion utilisateurs\"\n      [solid]=\"true\"\n      [css]=\"'mt-8'\"\n      onClickLink=\"/user\"\n    />\n    <app-button\n      type=\"primary\"\n      label=\"Gestion lieux\"\n      [solid]=\"true\"\n      [css]=\"'mt-2'\"\n      onClickLink=\"/location\"\n    />\n    <app-button\n      type=\"primary\"\n      label=\"Gestion catégories\"\n      [solid]=\"true\"\n      [css]=\"'mt-2'\"\n      onClickLink=\"/category\"\n    />\n    <app-button\n      type=\"secondary\"\n      label=\"Quitter l'espace administrateur\"\n      [solid]=\"true\"\n      [css]=\"'mt-2'\"\n      onClickLink=\"/home\"\n    />\n  </div>\n</div>\n"
        },
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-a6b9fe3b4cfa2a3121011b41db1998d63f719b8e84fdeaa588c65b24cf81a97742c08fbe8aa1873fba0fba0f179168308d6387a270dd76a8ca434faea17faee2",
            "file": "src/app/components/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alerts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "Alert[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "NgForOf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from \"@angular/core\";\r\nimport { ButtonComponent } from \"../button/button.component\";\r\nimport { Alert } from \"../../interfaces/Alert\";\r\nimport { NgForOf } from \"@angular/common\";\r\n\r\n@Component({\r\n  selector: 'app-alert',\r\n  standalone: true,\r\n  imports: [\r\n    ButtonComponent,\r\n    NgForOf\r\n  ],\r\n  templateUrl: './alert.component.html',\r\n  styleUrl: './alert.component.css'\r\n})\r\nexport class AlertComponent {\r\n  @Input()\r\n  public alerts: Alert[] = []\r\n\r\n}\r\n",
            "styleUrl": "./alert.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div [className]=\"'alert'\" *ngFor=\"let alert of alerts\">\r\n  <h3>Ceci est un titre</h3>\r\n  <p>Une alerte qui est juste un test</p>\r\n  <div [className]=\"'d-flex j-between mb-2'\">\r\n    <app-button [type]=\"'primary'\" [solid]=\"true\" label=\"Lu\" [css]=\"'w-100'\"/>\r\n  </div>\r\n  <i [className]=\"'alert-timestamp'\">Envoyé il y a 3 minutes</i>\r\n</div>\r\n"
        },
        {
            "name": "AlertListPageComponent",
            "id": "component-AlertListPageComponent-6b3af70d6772a76cfa7e6b0733d32681048da6c824d76ac9c4c2b218b4ba90e863426528051bfa9fcdee47ce5673637dc330fdfcf97c05f5c13f70be2e3a685f",
            "file": "src/app/pages/AlertListPage/AlertListPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./AlertListPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alerts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Alert[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiUserUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatIcon"
                },
                {
                    "name": "AlertComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\r\nimport { MatIcon } from \"@angular/material/icon\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { environment } from \"../../../environments/environment\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Alert } from \"../../interfaces/Alert\";\r\nimport { AlertComponent } from \"../../components/alert/alert.component\";\r\n\r\n@Component({\r\n  selector: 'app-alert-list-page',\r\n  standalone: true,\r\n  imports: [\r\n    MatIcon,\r\n    AlertComponent\r\n  ],\r\n  templateUrl: './AlertListPage.component.html',\r\n  styleUrl: './AlertListPage.component.css'\r\n})\r\nexport class AlertListPageComponent implements OnInit{\r\n  private apiUrl: string = environment.apiUserUrl;\r\n  protected alerts: Alert[] = [];\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    this.http.get<Alert[]>(`${this.apiUrl}getAllAlerts`, {withCredentials: true}).subscribe((data) => {\r\n      this.alerts = data;\r\n    }, (error) => {\r\n      if(error.status === 401) {\r\n        this.router.navigate([\"/\"])\r\n      }\r\n      throw error;\r\n    })\r\n  }\r\n\r\n}\r\n",
            "styleUrl": "./AlertListPage.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [className]=\"'header'\">\r\n  <a\r\n    href=\"/\"\r\n    [className]=\"\r\n      ['w-100', 'left-align', 'color-black', 'mobile-view'].join(' ')\r\n    \"\r\n  >\r\n    <mat-icon fontIcon=\"arrow_back\" />\r\n  </a>\r\n  <div [className]=\"'header-container'\">\r\n    <h2>Notifications</h2>\r\n  </div>\r\n</div>\r\n\r\n<div [className]=\"'container'\">\r\n  <app-alert [alerts]=\"alerts\" />\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-3242d470e91e2a1097e0dc94518726956160c0de240d9c76aad10ad649fa1aae7ef989bb13be23955ef9811ebe32386661d61ddb085b217c6314a1902c102135",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "NavbarComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { NavbarComponent } from './components/navbar/navbar.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet, NavbarComponent],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css',\n})\nexport class AppComponent {}\n",
            "styleUrl": "./app.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-navbar />\n<router-outlet />\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d3cf9506fb15c7e748d93913819089d1708364c7be1adecddfbd76509f1b16ccf8dfd829322234dce1597b662dfe04b8aafc18dc5c1472a313637b3056104f1d",
            "file": "src/app/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "css",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "onClickLink",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "solid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "\"normal\" | \"primary\" | \"secondary\" | \"tertiary\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "clickFunction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, SecurityContext } from \"@angular/core\";\nimport { NgClass } from \"@angular/common\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\n\n@Component({\n  selector: 'app-button',\n  standalone: true,\n  imports: [NgClass],\n  templateUrl: './button.component.html',\n  styleUrl: './button.component.css',\n})\nexport class ButtonComponent {\n  @Input()\n  label: string = '';\n\n  @Input()\n  icon: string = '';\n\n  @Input()\n  type: 'normal' | 'primary' | 'secondary' | 'tertiary' = 'normal';\n\n  @Input()\n  solid: boolean = false;\n\n  @Input()\n  css: string = '';\n\n  @Input()\n  onClickLink: string = '';\n\n  @Input()\n  disabled: boolean = false;\n\n  constructor(private sanitizer: DomSanitizer) {\n  }\n\n  public get classes(): string[] {\n    const mode =\n      this.type == 'primary'\n        ? 'btn-primary'\n        : this.type == 'secondary'\n          ? 'btn-secondary'\n          : this.type == 'tertiary'\n            ? 'btn-tertiary'\n            : '';\n\n    return ['btn', mode, this.solid ? 'btn-solid' : '', this.css];\n  }\n\n  public clickFunction() {\n    const link = this.sanitizer.sanitize(SecurityContext.URL, this.onClickLink);\n    if (this.onClickLink != '' && link != null) {\n      document.location.href = link\n    }\n  }\n}\n",
            "styleUrl": "./button.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 37
                    }
                }
            },
            "templateData": "<button [ngClass]=\"classes\" [disabled]=\"disabled\" (click)=\"clickFunction()\">\n  <i [className]=\"icon\"></i>\n  {{ label }}\n</button>\n"
        },
        {
            "name": "CalendarComponent",
            "id": "component-CalendarComponent-f39d4f19ed2ca3147d9a39ad382d4c828a18916b833f7766e949839e012dae8917965b0eefd51ac38d050bb954fca45894f0b9af20ec2533b0be00ddff024daf",
            "file": "src/app/components/calendar/calendar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "provideNativeDateAdapter()"
                }
            ],
            "selector": "app-calendar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./calendar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "events",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "EventSourceInput",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "calendarComponent",
                    "defaultValue": "new FullCalendarComponent(\n    {} as ElementRef,\n    {} as ChangeDetectorRef,\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FullCalendarComponent",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'calendar'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "calendarOptions",
                    "defaultValue": "{\n    contentHeight: 'auto',\n    eventClick: this.handleEventClick.bind(this),\n    handleWindowResize: false,\n    headerToolbar: {\n      start: 'title',\n      center: '',\n      end: this.endButton(),\n    },\n    locale: frLocale,\n    plugins: [dayGridPlugin, listPlugin, timeGridPlugin],\n    timeZone: 'Europe/Paris',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarOptions",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "calendarView",
                    "defaultValue": "'dayGridMonth'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "screenHeight",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "screenWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedEvent",
                    "defaultValue": "{} as EventInterface",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventInterface",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "x",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "y",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDatepicker",
                    "args": [
                        {
                            "name": "picker",
                            "type": "MatDatepicker<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "picker",
                            "type": "MatDatepicker<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "endButton",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "handleEventClick",
                    "args": [
                        {
                            "name": "clickedEvent",
                            "type": "EventClickArg",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "clickedEvent",
                            "type": "EventClickArg",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "updateEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "view",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 107
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FullCalendarModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                },
                {
                    "name": "DatePipe",
                    "type": "pipe"
                },
                {
                    "name": "MatFormField"
                },
                {
                    "name": "MatDatepicker"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerInput"
                },
                {
                    "name": "MatInput"
                },
                {
                    "name": "MatLabel"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostListener,\n  Input,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport { ButtonComponent } from '../button/button.component';\nimport {\n  FullCalendarComponent,\n  FullCalendarModule,\n} from '@fullcalendar/angular';\nimport {\n  CalendarOptions,\n  EventClickArg,\n  EventSourceInput,\n} from '@fullcalendar/core';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport listPlugin from '@fullcalendar/list';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport frLocale from '@fullcalendar/core/locales/fr';\nimport { MatIcon } from '@angular/material/icon';\nimport { DatePipe } from '@angular/common';\nimport { MatFormField } from '@angular/material/form-field';\nimport {\n  MatDatepicker,\n  MatDatepickerInput,\n  MatDatepickerModule,\n} from '@angular/material/datepicker';\nimport { FormsModule } from '@angular/forms';\nimport { MatInput, MatLabel } from '@angular/material/input';\nimport { provideNativeDateAdapter } from '@angular/material/core';\nimport { Router } from '@angular/router';\n\nexport interface EventInterface {\n  id: number;\n  title: string;\n  date_start: Date;\n  date_end: Date;\n  location: string;\n  status: string;\n}\n\n@Component({\n  selector: 'app-calendar',\n  standalone: true,\n  imports: [\n    ButtonComponent,\n    FullCalendarModule,\n    MatIcon,\n    DatePipe,\n    MatFormField,\n    MatDatepicker,\n    FormsModule,\n    MatDatepickerInput,\n    MatInput,\n    MatLabel,\n  ],\n  providers: [MatDatepickerModule, provideNativeDateAdapter()],\n  templateUrl: './calendar.component.html',\n  styleUrl: './calendar.component.css',\n})\nexport class CalendarComponent implements OnInit {\n  @ViewChild('calendar')\n  calendarComponent: FullCalendarComponent = new FullCalendarComponent(\n    {} as ElementRef,\n    {} as ChangeDetectorRef,\n  );\n\n  private calendarView: string = 'dayGridMonth';\n\n  private screenHeight: number = 0;\n  private screenWidth: number = 0;\n\n  protected selectedEvent: EventInterface = {} as EventInterface;\n\n  public endButton(): string {\n    let base = 'today prev,next';\n    if (document.documentElement.clientWidth > 660) {\n      return base + ' dayGridMonth,timeGridWeek,timeGridDay,listWeek';\n    }\n    return base;\n  }\n\n  @Input()\n  public events: EventSourceInput = [];\n\n  public x: number = 0;\n  public y: number = 0;\n\n  public calendarOptions: CalendarOptions = {\n    contentHeight: 'auto',\n    eventClick: this.handleEventClick.bind(this),\n    handleWindowResize: false,\n    headerToolbar: {\n      start: 'title',\n      center: '',\n      end: this.endButton(),\n    },\n    locale: frLocale,\n    plugins: [dayGridPlugin, listPlugin, timeGridPlugin],\n    timeZone: 'Europe/Paris',\n  };\n\n  @HostListener('window:resize', ['$event']) onResize(): void {\n    this.screenHeight = document.documentElement.clientHeight;\n    this.screenWidth = document.documentElement.clientWidth;\n    this.view();\n    this.calendarComponent.getApi().setOption('headerToolbar', {\n      start: 'title',\n      center: '',\n      end: this.endButton(),\n    });\n  }\n  constructor(private router: Router) {}\n\n  updateEvent() {\n    this.router.navigate(['/event/update'], {\n      state: { selectedEvent: this.selectedEvent },\n    });\n  }\n\n  ngOnInit() {\n    this.screenHeight = document.documentElement.clientHeight;\n    this.screenWidth = document.documentElement.clientWidth;\n    if (this.screenWidth > 660) {\n      this.calendarView = 'dayGridMonth';\n    } else {\n      this.calendarView = 'listWeek';\n    }\n    this.calendarOptions.initialView = this.calendarView;\n  }\n\n  ngAfterViewInit(): void {\n    this.calendarOptions.events = this.events;\n  }\n\n  ngOnChanges(): void {\n    this.calendarOptions.events = this.events;\n  }\n\n  private view(): void {\n    if (this.screenWidth < 660) {\n      this.calendarView = 'listWeek';\n    } else {\n      this.calendarView = 'dayGridMonth';\n    }\n    this.calendarComponent.getApi().changeView(this.calendarView);\n  }\n\n  public closeDialog(): void {\n    let dialog = document.getElementById('dialog') as HTMLDialogElement;\n    dialog.close();\n  }\n\n  public handleEventClick(clickedEvent: EventClickArg): void {\n    clickedEvent.jsEvent.preventDefault();\n    let coordinates = clickedEvent.el.getBoundingClientRect();\n\n    this.selectedEvent = {\n      title: clickedEvent.event.title,\n      date_start: clickedEvent.event.start,\n      date_end: clickedEvent.event.end,\n      location:\n        clickedEvent.event.extendedProps['location'].address +\n        ' ' +\n        clickedEvent.event.extendedProps['location'].city,\n      status: clickedEvent.event.extendedProps['status'],\n      id: clickedEvent.event.extendedProps['id'],\n      contact_objective: clickedEvent.event.extendedProps['contact_objective'],\n      stand_size: clickedEvent.event.extendedProps['stand_size'],\n      item_manager: clickedEvent.event.extendedProps['item_manager'],\n    } as EventInterface;\n    console.log(clickedEvent.event.start);\n\n    let dialog = document.getElementById('dialog') as HTMLDialogElement;\n    if (this.screenWidth > 900) {\n      this.x = coordinates.left;\n      this.y = coordinates.top;\n      if (this.screenWidth - this.x < 448) {\n        this.x = this.x - (this.screenWidth - this.x);\n      }\n      if (this.screenHeight - this.y < 220) {\n        this.y = this.y - 220;\n      }\n      dialog.style.left = this.x + 'px';\n      dialog.style.top = this.y + 'px';\n    } else {\n      dialog.style.width = this.screenWidth - 32 - 2 + 'px';\n      dialog.style.maxWidth = 'none';\n      dialog.style.top = 0 + 'px';\n      dialog.style.height = '100%';\n    }\n    dialog.show();\n  }\n\n  public closeDatepicker(picker: MatDatepicker<any>) {\n    picker['_destroyOverlay']();\n  }\n}\n",
            "styleUrl": "./calendar.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 116,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<full-calendar #calendar [options]=\"calendarOptions\"></full-calendar>\n<dialog id=\"dialog\">\n  <div class=\"dialog-header\">\n    <h3>{{ selectedEvent.title }}</h3>\n    <span (click)=\"closeDialog()\" class=\"btn-close\">\n      <mat-icon fontIcon=\"close\"></mat-icon>\n    </span>\n  </div>\n  <div class=\"dialog-container\">\n    <mat-form-field>\n      <mat-label>Début</mat-label>\n      <input\n        matInput\n        [matDatepicker]=\"picker\"\n        placeholder=\"Début\"\n        (dateChange)=\"closeDatepicker(picker)\"\n        [(ngModel)]=\"selectedEvent.date_start\"\n        readonly\n      />\n      <mat-datepicker #picker></mat-datepicker>\n    </mat-form-field>\n    <mat-form-field>\n      <mat-label>Fin</mat-label>\n      <input\n        matInput\n        [matDatepicker]=\"picker_end\"\n        placeholder=\"Fin\"\n        (dateChange)=\"closeDatepicker(picker_end)\"\n        [(ngModel)]=\"selectedEvent.date_end\"\n        readonly\n      />\n      <mat-datepicker #picker_end></mat-datepicker>\n    </mat-form-field>\n    <p>Statut: {{ selectedEvent.status }}</p>\n    <p>Lieu: {{ selectedEvent.location }}</p>\n    <div [className]=\"'d-flex flex-column'\">\n      <a [href]=\"'/event/checklist'\" [className]=\"'form-access-link'\">\n        Formulaire de départ\n        <mat-icon fontIcon=\"arrow_forward\" />\n      </a>\n      <a [href]=\"'/event/checklist'\" [className]=\"'form-access-link'\">\n        Formulaire de retour\n        <mat-icon fontIcon=\"arrow_forward\" />\n      </a>\n    </div>\n    <app-button\n      [solid]=\"true\"\n      [type]=\"'primary'\"\n      label=\"Mettre à jour\"\n      id=\"submit\"\n      (click)=\"updateEvent()\"\n    >\n    </app-button>\n  </div>\n</dialog>\n"
        },
        {
            "name": "ChecklistItemComponent",
            "id": "component-ChecklistItemComponent-eca9083e839dc7a0cc707891831e511789180416fbcea3d420fea3fb744bd8b540d9b9a7cebf666792a447473c9569c6b11693a69e244d1e2a28f1b5259dbb7d",
            "file": "src/app/components/checklistItem/ChecklistItem.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checklist-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./ChecklistItem.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "ReservedItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "setVisible",
                    "args": [
                        {
                            "name": "item",
                            "type": "ReservedItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ReservedItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgForOf"
                },
                {
                    "name": "RemoveSpecialCharactersPipe",
                    "type": "pipe"
                },
                {
                    "name": "LowerCasePipe",
                    "type": "pipe"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { LowerCasePipe, NgForOf } from '@angular/common';\nimport { RemoveSpecialCharactersPipe } from '../../pipes/removeSpecialCharacters.pipe';\nimport { ButtonComponent } from '../button/button.component';\nimport { ReservedItem } from '../../interfaces/ReservedItem';\n\n@Component({\n  selector: 'app-checklist-item',\n  standalone: true,\n  imports: [\n    NgForOf,\n    RemoveSpecialCharactersPipe,\n    LowerCasePipe,\n    ButtonComponent,\n  ],\n  templateUrl: './ChecklistItem.component.html',\n  styleUrl: './ChecklistItem.component.css',\n})\nexport class ChecklistItemComponent {\n  @Input()\n  items: ReservedItem[] = [];\n\n  public setVisible(item: ReservedItem) {\n    item.status = !item.status;\n    document\n      .getElementById(\n        new RemoveSpecialCharactersPipe()\n          .transform(item.item_location.item_id.name)\n          .toLowerCase() + '_div',\n      )\n      ?.setAttribute('checked', item.status.toString());\n  }\n}\n",
            "styleUrl": "./ChecklistItem.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div\n  *ngFor=\"let item of items\"\n  [className]=\"'item'\"\n  (click)=\"setVisible(item)\"\n  [id]=\"\n    (item.item_location.item_id.name | lowercase | removeSpecialCharacters) +\n    '_div'\n  \"\n>\n  <div [className]=\"'item_checkbox'\">\n    <i class=\"fa-solid fa-check\"></i>\n  </div>\n  <div [className]=\"'item_info'\">\n    <p>{{ item.quantity }} {{ item.item_location.item_id.name }}</p>\n  </div>\n</div>\n"
        },
        {
            "name": "ConfirmationDialogComponent",
            "id": "component-ConfirmationDialogComponent-d9a3ca51e12f5d4d6ed419db30dc52ddf9eca4a519cd057ad2354fea94e2e3acaf4d20f00717e9fd8eba764f685156fb750291c9fa071dff036bb2f9016d2d03",
            "file": "src/app/components/confirmationDialog/confirmationDialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirmation-dialog-component",
            "styleUrls": [
                "./confirmationDialog.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./confirmationDialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ConfirmationDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onYesClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatDialogModule, MatDialogRef } from '@angular/material/dialog';\nimport { ButtonComponent } from '../button/button.component';\n\n@Component({\n  selector: 'app-confirmation-dialog-component',\n  standalone: true,\n  templateUrl: './confirmationDialog.component.html',\n  styleUrls: ['./confirmationDialog.component.css'],\n  imports: [ButtonComponent, MatDialogModule],\n})\nexport class ConfirmationDialogComponent {\n  constructor(public dialogRef: MatDialogRef<ConfirmationDialogComponent>) {}\n\n  onNoClick(): void {\n    this.dialogRef.close(false);\n  }\n\n  onYesClick(): void {\n    this.dialogRef.close(true);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dialog-actions {\n  display: flex;\n  justify-content: space-between;\n}\n",
                    "styleUrl": "./confirmationDialog.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmationDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmationDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<h2 mat-dialog-title>Suppression</h2>\n<mat-dialog-content\n  >Voulez vous vraiment supprimer cet élément ?</mat-dialog-content\n>\n<mat-dialog-actions class=\"dialog-actions\">\n  <app-button\n    [solid]=\"true\"\n    [type]=\"'primary'\"\n    label=\"Oui\"\n    (click)=\"onYesClick()\"\n  ></app-button>\n  <app-button\n    [solid]=\"true\"\n    [type]=\"'secondary'\"\n    label=\"Non\"\n    (click)=\"onNoClick()\"\n  ></app-button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "EventListPageComponent",
            "id": "component-EventListPageComponent-100ab029f0d33d734fc1998182ad05ae8a273ccc3d0d402abcdbfb56ea2bb0205fb774b77d9470e4bf38b0424a7ef5d9b8510d56705929f1f69a1eea197e3366",
            "file": "src/app/pages/EventListPage/EventListPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-event-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./EventListPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiEventUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "events",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "userService",
                    "defaultValue": "this.injector.get(UserService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transformToEventSourceInput",
                    "args": [
                        {
                            "name": "events",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Event[]",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "events",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CalendarComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "ToggleComponent",
                    "type": "component"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injector, OnInit } from \"@angular/core\";\nimport { CalendarComponent } from '../../components/calendar/calendar.component';\nimport { ButtonComponent } from '../../components/button/button.component';\nimport { NgIf } from '@angular/common';\nimport { ToggleComponent } from '../../components/toggle/toggle.component';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { Event } from '../../interfaces/Event';\nimport { EventFromAPI } from '../../interfaces/EventFromAPI';\nimport { MatIcon } from '@angular/material/icon';\nimport { UserService } from \"../../services/User.service\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: 'app-event-list-page',\n  standalone: true,\n  imports: [CalendarComponent, ButtonComponent, NgIf, ToggleComponent, MatIcon],\n  templateUrl: './EventListPage.component.html',\n  styleUrl: './EventListPage.component.css',\n})\nexport class EventListPageComponent implements OnInit {\n  constructor(private http: HttpClient, private injector: Injector, private router: Router) {}\n\n  public events: Event[] = [];\n  private apiUrl = environment.apiEventUrl;\n  protected userService = this.injector.get(UserService);\n\n  ngOnInit() {\n    this.http\n      .get<EventFromAPI[]>(this.apiUrl + 'getAll', { withCredentials: true })\n      .subscribe(\n        (data) => {\n          this.events = this.transformToEventSourceInput(data);\n        },\n        (error) => {\n          if(error.status === 401) {\n            this.router.navigate(['/'])\n          }\n          throw error;\n        }\n      );\n  }\n\n  transformToEventSourceInput(events: any[]): Event[] {\n    return events.map((event) => ({\n      title: event.name,\n      start: event.date_start,\n      end: event.date_end,\n      extendedProps: {\n        id: event.id,\n        contact_objective: event.contact_objective,\n        item_manager: {\n          id: event.item_manager.id,\n          last_name: event.item_manager.last_name,\n          first_name: event.item_manager.first_name,\n        },\n        location: {\n          address: event.location.address,\n          city: event.location.city,\n          id: event.location.id,\n          room: event.location.room,\n        },\n        stand_size: event.stand_size,\n        status: event.status.label,\n      },\n    }));\n  }\n}\n",
            "styleUrl": "./EventListPage.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [className]=\"'header'\">\n  <a\n    href=\"/\"\n    [className]=\"\n      ['w-100', 'left-align', 'color-black', 'mobile-view'].join(' ')\n    \"\n  >\n    <mat-icon fontIcon=\"arrow_back\" />\n  </a>\n  <div [className]=\"'header-container'\">\n    <h2>Événements</h2>\n  </div>\n</div>\n\n<div [className]=\"'container'\">\n  <app-calendar [events]=\"events\" />\n\n  <app-button\n    label=\"Créer un événement\"\n    type=\"primary\"\n    [css]=\"'mobile-mb-15'\"\n    [solid]=\"true\"\n    onClickLink=\"/event/add\"\n    *ngIf=\"userService.isAdmin()\"\n  />\n</div>\n"
        },
        {
            "name": "HomePageComponent",
            "id": "component-HomePageComponent-1c57cee57361d71c51f13ae30b37a488ac3dc2ef6f3e81c998873fb456aa84b2db64ae92028bdf6d8efc78d7d36e0175da86fd7d3b9a007403d653664cf01f06",
            "file": "src/app/pages/HomePage/HomePage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./HomePage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "userName",
                    "defaultValue": "this.userService.getUserName()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "userService",
                    "defaultValue": "this.injector.get(UserService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injector, OnInit } from \"@angular/core\";\nimport { ButtonComponent } from '../../components/button/button.component';\nimport { NgIf, NgOptimizedImage } from \"@angular/common\";\nimport { UserService } from \"../../services/User.service\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: 'app-home-page',\n  standalone: true,\n  imports: [ButtonComponent, NgOptimizedImage, NgIf],\n  templateUrl: './HomePage.component.html',\n  styleUrl: './HomePage.component.css',\n})\nexport class HomePageComponent implements OnInit{\n  constructor(private injector: Injector, private router: Router) {\n  }\n\n  protected userService = this.injector.get(UserService);\n  protected userName = this.userService.getUserName();\n\n  ngOnInit() {\n    if (!this.userService.isLoggedIn()) {\n      this.router.navigate(['/login']);\n    }\n  }\n}\n",
            "styleUrl": "./HomePage.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [className]=\"'header'\">\n  <div [className]=\"'header-container d-flex flex-column align-center'\">\n    <img\n      ngSrc=\"assets/img/logos/logo-ISEN-vertical.png\"\n      alt=\"Logo ISEN Méditerranée\"\n      class=\"mt-3\"\n      priority\n      width=\"150\"\n      height=\"148\"\n    />\n    <img\n      ngSrc=\"assets/img/icons/ISEN-bulles.svg\"\n      alt=\"Bulles ISEN\"\n      class=\"mt-2\"\n      priority\n      width=\"182\"\n      height=\"194\"\n    />\n    <p class=\"mb-4\">Bonjour <b>{{ userName }}</b>👋</p>\n  </div>\n</div>\n<div [className]=\"'container'\">\n  <div id=\"actionButtons\">\n    <app-button\n      type=\"primary\"\n      label=\"Événements\"\n      [solid]=\"true\"\n      onClickLink=\"/event/list\"\n      css=\"mt-2\"\n    />\n    <app-button\n      type=\"primary\"\n      label=\"Gestion du stock\"\n      [solid]=\"true\"\n      css=\"mt-2\"\n      onClickLink=\"/stock\"\n    />\n    <app-button\n      type=\"tertiary\"\n      label=\"Espace administrateur\"\n      css=\"mt-4\"\n      [solid]=\"true\"\n      onClickLink=\"/admin\"\n      *ngIf=\"userService.isAdmin()\"\n    />\n    <app-button\n      type=\"secondary\"\n      label=\"Se déconnecter\"\n      [solid]=\"true\"\n      css=\"mt-2\"\n      onClickLink=\"/logout\"\n    />\n  </div>\n</div>\n"
        },
        {
            "name": "IMSListPageComponent",
            "id": "component-IMSListPageComponent-2f192b7911c029d0ecb4448ce19b08dc82765d91b72e0abf3b3b66c433c304b477608d5e1ee8cfe623cf6d419547300a1558055bf99c74c08fa1bdf680ffde19",
            "file": "src/app/pages/IMSListPage/IMSListPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-imslist-page",
            "styleUrls": [
                "./IMSListPage.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./IMSListPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiStockUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "categoriesAvailable",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "filterControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemLocation[]",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "itemsToDisplay",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemLocation[]",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "quantityLimitedItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemLocation[]",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "ItemLocation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ItemLocation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "ItemLocation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ItemLocation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "organizeItemsToDisplay",
                    "args": [
                        {
                            "name": "itemStocks",
                            "type": "ItemLocation[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "itemStocks",
                            "type": "ItemLocation[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleActions",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCategoriesAvailable",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateItemsToDisplay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                },
                {
                    "name": "MatIconButton"
                },
                {
                    "name": "MatFormField"
                },
                {
                    "name": "MatInput"
                },
                {
                    "name": "MatLabel"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatOption"
                },
                {
                    "name": "MatSelect"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "StockItemComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Component, Injectable, OnInit } from '@angular/core';\nimport { catchError, tap } from 'rxjs/operators';\nimport { ButtonComponent } from '../../components/button/button.component';\nimport { CommonModule } from '@angular/common';\nimport { environment } from '../../../environments/environment';\nimport { Router, RouterModule } from '@angular/router';\nimport { MatIcon } from '@angular/material/icon';\nimport { MatIconButton } from '@angular/material/button';\nimport { MatFormField } from '@angular/material/form-field';\nimport { MatInput, MatLabel } from '@angular/material/input';\nimport { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatOption } from '@angular/material/autocomplete';\nimport { Category } from '../../interfaces/Category';\nimport { MatSelect } from '@angular/material/select';\nimport { ItemLocation } from '../../interfaces/ItemLocation';\nimport { UserService } from '../../services/User.service';\nimport { StockItemComponent } from \"../../components/stockItem/stock-item.component\";\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-imslist-page',\n  standalone: true,\n  templateUrl: './IMSListPage.component.html',\n  styleUrls: ['./IMSListPage.component.css'],\n  imports: [\n    ButtonComponent,\n    CommonModule,\n    RouterModule,\n    MatIcon,\n    MatIconButton,\n    MatFormField,\n    MatInput,\n    MatLabel,\n    FormsModule,\n    MatOption,\n    MatSelect,\n    ReactiveFormsModule,\n    StockItemComponent\n  ]\n})\nexport class IMSListPageComponent implements OnInit {\n  public filterControl = new FormControl();\n  protected items: ItemLocation[] = [];\n  protected categoriesAvailable: Category[] = [];\n  private apiUrl = environment.apiStockUrl;\n\n  protected quantityLimitedItems: ItemLocation[] = [];\n  protected itemsToDisplay: ItemLocation[] = [];\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private userService: UserService,\n  ) {}\n\n  editItem(item: ItemLocation): void {\n    this.router.navigate(['stock/update'], {\n      state: { selectedItem: item },\n    });\n  }\n\n  deleteItem(item: ItemLocation): void {\n    this.http\n      .delete(this.apiUrl + 'item/' + item.id + '/' + item.location_id.id, {\n        withCredentials: true,\n      })\n      .subscribe(() => {\n        this.items = this.items.filter((i) => i.id !== item.id);\n        this.updateCategoriesAvailable();\n        this.updateItemsToDisplay();\n      }, (error) => {\n        if(error.status === 401) {\n          this.router.navigate(['/'])\n        }\n        throw error;\n      })\n  }\n\n  ngOnInit(): void {\n    this.http\n      .get<ItemLocation[]>(this.apiUrl + 'item/getAll', { withCredentials: true })\n      .subscribe(\n        (data) => {\n          this.items = data;\n          this.updateCategoriesAvailable();\n          this.organizeItemsToDisplay();\n        },\n        (error) => {\n          throw error;\n        }\n      );\n  }\n\n  toggleActions(event: MouseEvent): void {\n    const fileElement = (event.currentTarget as HTMLElement).closest('.file');\n    if (fileElement) {\n      fileElement.classList.toggle('show-actions');\n    }\n  }\n\n  updateCategoriesAvailable(): void {\n    const categories: Category[] = [];\n    this.items.forEach((item) => {\n      const cat = item.item_id.category_id;\n      if (!categories.some((existingCat) => existingCat.id === cat.id)) {\n        categories.push(cat);\n      }\n    });\n    this.categoriesAvailable = categories;\n  }\n\n  organizeItemsToDisplay(itemStocks?: ItemLocation[]): void {\n    let consumablesItems: ItemLocation[] = [];\n    let generalItems: ItemLocation[] = [];\n    this.quantityLimitedItems = [];\n    if (!itemStocks) {\n      itemStocks = this.items;\n    }\n    for (const item of itemStocks) {\n      if (['Brochures', 'Goodies'].includes(item.item_id.category_id.label)) {\n        if (item.quantity < 40) {\n          this.quantityLimitedItems.push(item);\n        } else {\n          consumablesItems.push(item);\n        }\n      } else {\n        if (item.item_id.category_id.label == 'Kakémono') {\n          if (item.quantity < 0) {\n            this.quantityLimitedItems.push(item);\n          } else {\n            generalItems.push(item);\n          }\n        } else {\n          generalItems.push(item);\n        }\n      }\n    }\n    this.itemsToDisplay = [\n      ...this.quantityLimitedItems,\n      ...consumablesItems,\n      ...generalItems,\n    ];\n  }\n\n  updateItemsToDisplay(): void {\n    const selectedCategory = this.filterControl.value;\n\n    if (!selectedCategory) {\n      this.organizeItemsToDisplay();\n    } else {\n      this.organizeItemsToDisplay(\n        this.items.filter(\n          (item) => item.item_id.category_id.id === selectedCategory,\n        ),\n      );\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n\n\n\n",
                    "styleUrl": "./IMSListPage.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [className]=\"'header'\">\n  <a\n    href=\"/\"\n    [className]=\"\n      ['w-100', 'left-align', 'color-black', 'mobile-view'].join(' ')\n    \"\n  >\n    <mat-icon fontIcon=\"arrow_back\" />\n  </a>\n  <div [className]=\"['header-container', 'w-100', 'mb-2'].join(' ')\">\n    <h2>Gestion du stock</h2>\n  </div>\n\n  <div\n    [className]=\"['d-flex', 'flex-align-right', 'flex-row'].join(' ')\"\n    id=\"optionsActions\"\n  >\n    <mat-form-field [className]=\"'mr-1'\">\n      <mat-label>Catégorie</mat-label>\n      <mat-select\n        [formControl]=\"filterControl\"\n        (selectionChange)=\"updateItemsToDisplay()\"\n      >\n        <mat-option [value]=\"0\">--</mat-option>\n        <mat-option\n          *ngFor=\"let category of categoriesAvailable\"\n          [value]=\"category.id\"\n        >\n          {{ category.label }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <app-button\n      type=\"secondary\"\n      label=\"+\"\n      [solid]=\"true\"\n      onClickLink=\"/stock/add\"\n      [css]=\"'btn-plus h-100'\"\n      [className]=\"'mb-20px'\"\n    ></app-button>\n  </div>\n</div>\n\n<div [className]=\"['container']\">\n  <app-stock-item [itemsToDisplay]=\"itemsToDisplay\" [quantityLimitedItems]=\"quantityLimitedItems\"\n                  [editItem]=\"editItem\" [deleteItem]=\"deleteItem\" [toggleActions]=\"toggleActions\"/>\n</div>\n"
        },
        {
            "name": "InventoryChecklistForEventComponent",
            "id": "component-InventoryChecklistForEventComponent-b72cfa337b074ba512618a48feebd2cf0d6130c4d15032c734a2916e02df78dd58303e218612a7a790e25f10aee6824c6152b8a82d3ab780d93e4c433ede7b45",
            "file": "src/app/pages/InventoryChecklistForEvent/InventoryChecklistForEvent.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-inventory-checklist-for-event",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./InventoryChecklistForEvent.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiStockUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemLocation[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "reservedItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReservedItem[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "selectedEvent",
                    "defaultValue": "{} as Event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ChecklistItemComponent",
                    "type": "component"
                },
                {
                    "name": "NgForOf"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\nimport { environment } from \"../../../environments/environment\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { ItemLocation } from \"../../interfaces/ItemLocation\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { ChecklistItemComponent } from \"../../components/checklistItem/ChecklistItem.component\";\nimport { NgForOf } from \"@angular/common\";\nimport { ButtonComponent } from \"../../components/button/button.component\";\nimport { Router } from \"@angular/router\";\nimport { Event } from \"../../interfaces/Event\";\nimport { ReservedItem } from \"../../interfaces/ReservedItem\";\nimport { MatIcon } from \"@angular/material/icon\";\n\n@Component({\n  selector: 'app-inventory-checklist-for-event',\n  standalone: true,\n  imports: [ChecklistItemComponent, NgForOf, ButtonComponent, MatIcon],\n  templateUrl: './InventoryChecklistForEvent.component.html',\n  styleUrl: './InventoryChecklistForEvent.component.css',\n})\nexport class InventoryChecklistForEventComponent implements OnInit {\n  private apiUrl = environment.apiStockUrl;\n  protected items: ItemLocation[] = [];\n  protected reservedItems: ReservedItem[] = [];\n  protected selectedEvent: Event = {} as Event;\n\n  constructor(\n    private httpClient: HttpClient,\n    private router: Router,\n  ) {\n    const navigation = this.router.getCurrentNavigation();\n    if (navigation && navigation.extras && navigation.extras.state) {\n      this.selectedEvent = navigation.extras.state?.['selectedEvent'];\n    }\n  }\n\n  ngOnInit() {\n    this.httpClient\n      .get<\n        ReservedItem[]\n      >(this.apiUrl + '/reservedItem/getAll/' + this.selectedEvent.extendedProps?.id, { withCredentials: true })\n      .subscribe(\n        (data) => {\n          this.reservedItems = data;\n        },\n        (error) => {\n          if(error.status === 401) {\n            this.router.navigate(['/'])\n          }\n          throw error;\n        }\n      );\n\n    this.httpClient\n      .get<ItemLocation[]>(this.apiUrl + 'item/getAll', { withCredentials: true })\n      .subscribe(\n        (data) => {\n          this.items = data;\n        },\n        (error) => {\n          if(error.status === 401) {\n            this.router.navigate(['login'])\n          }\n          throw error;\n        }\n      );\n\n    this.httpClient\n      .get<ReservedItem[]>(this.apiUrl + 'reservedItem/getAll', { withCredentials: true })\n      .subscribe(\n        (data) => {\n          for (const itemStock of data) {\n            if (\n              itemStock.event.end > this.selectedEvent.start ||\n              itemStock.event.start < this.selectedEvent.end\n            ) {\n              const index = this.items.indexOf(itemStock.item_location);\n              if (index > -1) {\n                this.items.splice(index, 1);\n              }\n            }\n          }\n        },\n        (error) => {\n          if(error.status === 401) {\n            this.router.navigate(['login'])\n          }\n          throw error;\n        }\n      );\n  }\n}\n",
            "styleUrl": "./InventoryChecklistForEvent.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [className]=\"'header'\">\n  <a\n    href=\"/\"\n    [className]=\"\n      ['w-100', 'left-align', 'color-black', 'mobile-view'].join(' ')\n    \"\n  >\n    <mat-icon fontIcon=\"arrow_back\" />\n  </a>\n  <div [className]=\"'header-container'\">\n    <h2>Checklist</h2>\n  </div>\n</div>\n<div [className]=\"'container'\">\n  <app-checklist-item [items]=\"reservedItems\" />\n  <app-button [type]=\"'tertiary'\" [solid]=\"true\" [label]=\"'Ajouter un item'\" />\n  <app-button [type]=\"'primary'\" [solid]=\"true\" [label]=\"'Valider la saisie'\" />\n</div>\n"
        },
        {
            "name": "ListCategoryPageComponent",
            "id": "component-ListCategoryPageComponent-fdda31e39c2dfefee320ae15dd173637cd3e97c8156b3856ac01913c1d82ca5bd435640039578dd0e1e25e9d4e7ae9aab4965ca5001e58d785fe5ffe3ee17fec",
            "file": "src/app/pages/Admin/ListCategoryPage/ListCategoryPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-category-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./ListCategoryPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiStockUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injectable, OnInit } from '@angular/core';\nimport { environment } from '../../../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs';\nimport { ButtonComponent } from '../../../components/button/button.component';\nimport { CommonModule } from '@angular/common';\nimport { MatIcon } from '@angular/material/icon';\nimport { Category } from '../../../interfaces/Category';\nimport { Router } from \"@angular/router\";\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-list-category-page',\n  standalone: true,\n  templateUrl: './ListCategoryPage.component.html',\n  styleUrl: './ListCategoryPage.component.css',\n  imports: [ButtonComponent, CommonModule, MatIcon],\n})\nexport class ListCategoryPageComponent implements OnInit {\n  categories: Category[] = [];\n  private apiUrl = environment.apiStockUrl;\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  ngOnInit() {\n    this.http.get<Category[]>(this.apiUrl + 'category/getAll', {\n      withCredentials: true,\n    })\n    .subscribe(\n      (data) => {\n        this.categories = data;\n      },\n      (error) => {\n        if(error.status === 401) {\n          this.router.navigate(['/']);\n        }\n        console.error(error);\n        throw error;\n      }\n    );\n  }\n}\n",
            "styleUrl": "./ListCategoryPage.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [className]=\"'header'\">\n  <a\n    href=\"/\"\n    [className]=\"\n      ['w-100', 'left-align', 'color-black', 'mobile-view'].join(' ')\n    \"\n  >\n    <mat-icon fontIcon=\"arrow_back\" />\n  </a>\n  <div [className]=\"'header-container'\">\n    <h2>Gestion des catégories</h2>\n  </div>\n</div>\n\n<div [className]=\"'container'\">\n  <app-button\n    label=\"Ajouter une catégorie\"\n    type=\"primary\"\n    [css]=\"'mobile-mb-15'\"\n    [solid]=\"true\"\n    [onClickLink]=\"'/category/add'\"\n  />\n  <div *ngFor=\"let category of categories\">\n    <div class=\"card\">\n      <div class=\"details\">\n        <span class=\"gap\"><br /></span>\n        <span class=\"address\">{{\n          category?.label ? (category.label | titlecase) : \"Non renseigné\"\n        }}</span>\n        <span class=\"gap\"><br /></span>\n      </div>\n      <div class=\"icon-container\">\n        <mat-icon class=\"icon\" fontIcon=\"edit\"></mat-icon>\n        <mat-icon class=\"icon\" fontIcon=\"delete\"></mat-icon>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "LocationListPageComponent",
            "id": "component-LocationListPageComponent-a3a05b54891afa5d9d21ffc549e4e6afd18472bfa6bd1f6450af2b0127e8a676b735cd7ef03da06feccc6b2d8271014e3164a38276ad443c1841de93d8866853",
            "file": "src/app/pages/Admin/LocationListPage/LocationListPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-location-list-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./LocationListPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiStockUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "locations",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Location[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteLocation",
                    "args": [
                        {
                            "name": "location",
                            "type": "Location",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "Location",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editLocation",
                    "args": [
                        {
                            "name": "location",
                            "type": "Location",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "Location",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injectable, OnInit } from '@angular/core';\nimport { environment } from '../../../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { ButtonComponent } from '../../../components/button/button.component';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { MatIcon } from '@angular/material/icon';\nimport { ConfirmationDialogComponent } from '../../../components/confirmationDialog/confirmationDialog.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Location } from '../../../interfaces/Location';\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-location-list-page',\n  standalone: true,\n  templateUrl: './LocationListPage.component.html',\n  styleUrl: './LocationListPage.component.css',\n  imports: [ButtonComponent, CommonModule, MatIcon],\n})\nexport class LocationListPageComponent implements OnInit {\n  locations: Location[] = [];\n  private apiUrl = environment.apiStockUrl;\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar,\n  ) {}\n\n  ngOnInit() {\n    this.http\n      .get<Location[]>(this.apiUrl + 'location/getAll', {\n        withCredentials: true\n      })\n      .subscribe(\n        (data) => {\n          this.locations = data;\n        },\n        (error) => {\n          if(error.status === 401) {\n            this.router.navigate(['/']);\n          }\n          console.error(error);\n          throw error;\n        }\n      )\n  }\n\n  editLocation(location: Location) {\n    this.router.navigate(['location/update'], {\n      state: { selectedLocation: location },\n    });\n  }\n\n  deleteLocation(location: Location) {\n    const dialogRef = this.dialog.open(ConfirmationDialogComponent);\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        this.http\n          .delete(this.apiUrl + 'location/' + location.id, {\n            responseType: 'text',\n            observe: 'response',\n            withCredentials: true,\n          })\n          .subscribe(\n            (response) => {\n              if (response.status == 204)\n                this.router.navigate(['/success'], {\n                  queryParams: {\n                    text: 'Le lieu a été supprimé avec succès',\n                    link: '/location',\n                  },\n                });\n              else {\n                this.snackBar.open(\n                  'Une erreur est survenue: ' + response.body,\n                  'Fermer',\n                  {\n                    duration: 5000,\n                  },\n                );\n              }\n            },\n            (error) => {\n              if(error.status === 401) {\n                this.router.navigate(['/']);\n              }\n              console.error(error.status);\n              this.snackBar.open(\n                'Une erreur est survenue: ' + error.message,\n                'Fermer',\n                {\n                  duration: 5000,\n                },\n              );\n            },\n          );\n      }\n    });\n  }\n}\n",
            "styleUrl": "./LocationListPage.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [className]=\"'header'\">\n  <a\n    href=\"/\"\n    [className]=\"\n      ['w-100', 'left-align', 'color-black', 'mobile-view'].join(' ')\n    \"\n  >\n    <mat-icon fontIcon=\"arrow_back\" />\n  </a>\n  <div [className]=\"'header-container'\">\n    <h2>Gestion des lieux</h2>\n  </div>\n\n  <app-button\n    label=\"Ajouter un lieu\"\n    type=\"primary\"\n    [css]=\"'mobile-mb-15'\"\n    [solid]=\"true\"\n    onClickLink=\"/location/add\"\n  />\n</div>\n<div [className]=\"'container'\">\n  <div *ngFor=\"let location of locations\">\n    <div class=\"card\">\n      <div class=\"details\">\n        <span class=\"address\">{{\n          location?.address ? (location.address | titlecase) : \"Non renseignée\"\n        }}</span>\n      </div>\n      <div [className]=\"'d-flex flex-row'\">\n        <div [className]=\"'details mr-2'\">\n          <span class=\"city\">\n            Ville:\n            {{\n              location?.city ? (location.city | titlecase) : \"Non renseignée\"\n            }}\n          </span>\n          <span class=\"room\" *ngIf=\"location.room\">\n            Salle: {{ location?.room }}\n          </span>\n        </div>\n        <div class=\"icon-container\">\n          <mat-icon\n            class=\"icon\"\n            fontIcon=\"edit\"\n            (click)=\"editLocation(location)\"\n          />\n          <mat-icon\n            class=\"icon\"\n            fontIcon=\"delete\"\n            (click)=\"deleteLocation(location)\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "LogInPageComponent",
            "id": "component-LogInPageComponent-4f6adf5c5e29d7fb170d6f30ed1e9630b4e319493d73263f497cf41496db2a3982ab5f69095890508f4dcccd54f97b86a898677c414325936e6ba2bc3e13efcc",
            "file": "src/app/pages/LogInPage/LogInPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "provideAnimations()"
                }
            ],
            "selector": "app-log-in-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./LogInPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "password",
                    "defaultValue": "new FormControl('', Validators.required)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "username",
                    "defaultValue": "new FormControl('', Validators.required)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "NgClass"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "SelectComponent",
                    "type": "component"
                },
                {
                    "name": "MatFormField"
                },
                {
                    "name": "MatInput"
                },
                {
                    "name": "MatLabel"
                },
                {
                    "name": "MatError"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { NgClass, NgOptimizedImage } from '@angular/common';\nimport { ButtonComponent } from '../../components/button/button.component';\nimport { SelectComponent } from '../../components/select/select.component';\nimport {\n  MatFormField,\n  MatError,\n  MatFormFieldModule,\n} from '@angular/material/form-field';\nimport { MatInput, MatInputModule, MatLabel } from '@angular/material/input';\nimport { provideAnimations } from '@angular/platform-browser/animations';\nimport {\n  FormControl,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { UserService } from '../../services/User.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-log-in-page',\n  standalone: true,\n  imports: [\n    NgOptimizedImage,\n    NgClass,\n    ButtonComponent,\n    SelectComponent,\n    MatFormField,\n    MatInput,\n    MatLabel,\n    MatError,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  providers: [MatFormFieldModule, MatInputModule, provideAnimations()],\n  templateUrl: './LogInPage.component.html',\n  styleUrl: './LogInPage.component.css',\n})\nexport class LogInPageComponent {\n  protected username: FormControl = new FormControl('', Validators.required);\n  protected password: FormControl = new FormControl('', Validators.required);\n\n  constructor(\n    private userService: UserService,\n    private router: Router,\n  ) {}\n\n  public login(): void {\n    if (!this.username.invalid && !this.password.invalid) {\n      this.userService.getUserData(this.username.value, this.password.value);\n    }\n  }\n}\n",
            "styleUrl": "./LogInPage.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div [className]=\"'header-container'\">\n  <h2>Connexion</h2>\n</div>\n<div [className]=\"'container h-100 align-center'\">\n  <img\n    ngSrc=\"assets/img/icons/ISEN-bulles.svg\"\n    alt=\"ISEN bulles\"\n    priority\n    width=\"188\"\n    height=\"196\"\n  />\n  <p>Bienvenue sur <b>IMS Promo</b> 👋</p>\n  <p><b>Connecte-toi ! 🔑</b></p>\n</div>\n\n<form method=\"post\" (ngSubmit)=\"login()\">\n  <mat-form-field [className]=\"'form-group'\">\n    <mat-label>Nom d'utilisateur</mat-label>\n    <input\n      type=\"text\"\n      matInput\n      id=\"mail_user\"\n      name=\"username\"\n      required\n      placeholder=\"antoine.dupont\"\n      autocomplete=\"off\"\n      [formControl]=\"username\"\n    />\n    @if(username.hasError('required')) {\n      <mat-error>Le nom d'utilisateur doit être renseigné</mat-error>\n    }\n  </mat-form-field>\n  <mat-form-field [className]=\"'form-group'\">\n    <mat-label>Mot de passe</mat-label>\n    <input\n      type=\"password\"\n      matInput\n      id=\"psw\"\n      name=\"password\"\n      required\n      placeholder=\"Mot de passe\"\n      autocomplete=\"off\"\n      [formControl]=\"password\"\n    />\n    @if(password.hasError('required')) {\n      <mat-error>Le mot de passe doit être renseigné</mat-error>\n    }\n  </mat-form-field>\n  <app-button\n    [solid]=\"true\"\n    [css]=\"'mt-8'\"\n    [type]=\"'primary'\"\n    label=\"Se connecter\"\n    id=\"btn-login\"\n  />\n</form>\n"
        },
        {
            "name": "LogOutPageComponent",
            "id": "component-LogOutPageComponent-1e77d893c61d3e187dd7cb014126711329acf1ecb0d980c4864b14eb0d5df3c5550b78ed897e6d4ff3f9ca7d701feba8f62af669c745062f3aaaf78938857f34",
            "file": "src/app/pages/LogOutPage/LogOutPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-logout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./LogOutPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\r\nimport { UserService } from \"../../services/User.service\";\r\n\r\n@Component({\r\n  selector: 'app-logout',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './LogOutPage.component.html',\r\n  styleUrl: './LogOutPage.component.css'\r\n})\r\nexport class LogOutPageComponent implements OnInit{\r\n  constructor(private userService: UserService) {}\r\n\r\n  ngOnInit() {\r\n    this.userService.logout();\r\n  }\r\n}\r\n",
            "styleUrl": "./LogOutPage.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>logout works!</p>\r\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-a013d30a0823c9cb77383ccb7541e0b8d3c5f3466c73a95b1784d2d4ef428a977aa79897d55e331f0a2feb032629411c9d857371d426f517ac901fc75ab56fdf",
            "file": "src/app/components/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "css",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "screenWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "userService",
                    "defaultValue": "this.injector.get(UserService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLinkActive"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener, Injector, Input, OnInit } from \"@angular/core\";\nimport { ButtonComponent } from '../button/button.component';\nimport { Router, RouterLink, RouterLinkActive } from '@angular/router';\nimport { MatIcon } from '@angular/material/icon';\nimport { UserService } from \"../../services/User.service\";\n\n@Component({\n  selector: 'app-navbar',\n  standalone: true,\n  imports: [ButtonComponent, RouterLinkActive, RouterLink, MatIcon],\n  templateUrl: './navbar.component.html',\n  styleUrl: './navbar.component.css',\n})\nexport class NavbarComponent implements OnInit {\n  private screenWidth: number = 0;\n\n  @Input()\n  public css: string = '';\n\n  constructor(private router: Router, private injector: Injector) {}\n\n  private userService = this.injector.get(UserService);\n\n  ngOnInit() {\n    this.onResize();\n  }\n\n  @HostListener('window:resize', ['$event']) onResize() {\n    this.screenWidth = document.documentElement.clientWidth;\n  }\n\n  public get classes(): string {\n    let cssClasses = [];\n    if (['/', '/home', '/login'].includes(this.router.url) || !this.userService.isLoggedIn()) {\n      cssClasses.push('d-none');\n    } else {\n      cssClasses.push('w-100')\n      if (this.css) {\n        cssClasses.push(this.css);\n      }\n      if (this.screenWidth <= 1024) {\n        cssClasses.push('sticky-bottom', 'navbar-mobile');\n      } else {\n        cssClasses.push('sticky-top');\n      }\n    }\n    return cssClasses.join(' ');\n  }\n}\n",
            "styleUrl": "./navbar.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "string",
                        "returnType": "string",
                        "line": 32
                    }
                }
            },
            "templateData": "<nav [className]=\"classes\">\n  <ul>\n    <li>\n      <a [routerLink]=\"['/']\" [routerLinkActive]=\"'active'\">\n        <mat-icon fontIcon=\"home\" />\n        Accueil\n      </a>\n    </li>\n    <li>\n      <a [routerLink]=\"['/stock']\" [routerLinkActive]=\"'active'\">\n        <mat-icon fontIcon=\"inventory\" />\n        Stock\n      </a>\n    </li>\n    <li>\n      <a [routerLink]=\"['/event/list']\" [routerLinkActive]=\"'active'\">\n        <mat-icon fontIcon=\"calendar_month\" />\n        Événements\n      </a>\n    </li>\n  </ul>\n  <ul [className]=\"'mr-1em'\">\n    <li>\n      <a [routerLink]=\"['/user']\" [routerLinkActive]=\"'active'\">\n        <mat-icon fontIcon=\"notifications_active\" />\n        Notifications\n      </a>\n    </li>\n    <li>\n      <a [routerLink]=\"['/logout']\" [routerLinkActive]=\"'active'\">\n        <mat-icon fontIcon=\"logout\" />\n        Déconnexion\n      </a>\n    </li>\n  </ul>\n\n  <!-- Mobile ul below -->\n  <ul [className]=\"'ul-mobile'\">\n    <li>\n      <a [routerLink]=\"['/']\" [routerLinkActive]=\"'active'\">\n        <mat-icon fontIcon=\"home\" />\n        Accueil\n      </a>\n    </li>\n    <li>\n      <a [routerLink]=\"['/stock']\" [routerLinkActive]=\"'active'\">\n        <mat-icon fontIcon=\"inventory\" />\n        Stock\n      </a>\n    </li>\n    <li>\n      <a [routerLink]=\"['/event/list']\" [routerLinkActive]=\"'active'\">\n        <mat-icon fontIcon=\"calendar_month\" />\n        Événements\n      </a>\n    </li>\n    <li>\n      <a [routerLink]=\"['/logout']\" [routerLinkActive]=\"'active'\">\n        <mat-icon fontIcon=\"logout\" />\n        Déconnexion\n      </a>\n    </li>\n  </ul>\n</nav>\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-ec13dfa643ba52fab8788eccb61d9618dd8a2e99102c65db36ba60ca1b516b87b8bf19e34c08d1ecf62f231f6d7527188c2cc3a482799d9685c3729ec4177616",
            "file": "src/app/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "css",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "SelectOptions[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgForOf"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { NgForOf } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nexport interface SelectOptions {\n  value: string;\n  label: string;\n}\n\n@Component({\n  selector: 'app-select',\n  standalone: true,\n  imports: [NgForOf, ReactiveFormsModule],\n  templateUrl: './select.component.html',\n  styleUrl: './select.component.css',\n})\nexport class SelectComponent {\n  @Input()\n  options: SelectOptions[] = [];\n\n  @Input()\n  label: string = '';\n\n  @Input()\n  name: string = '';\n\n  @Input()\n  id: string = '';\n\n  @Input()\n  css: string = '';\n}\n",
            "styleUrl": "./select.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<select [id]=\"id\" [name]=\"name\" [className]=\"css\">\n  <option *ngFor=\"let option of options\" [value]=\"option.value\">\n    {{ option.label }}\n  </option>\n</select>\n"
        },
        {
            "name": "StockItemComponent",
            "id": "component-StockItemComponent-1d82c6d12aa21e6450e5f9203b7d28cb0d4c7c0701b7a5e1267d38df10117960730691230ca8b765860a9ce0234b88a918125bf92f5f860b6620d73e1794ef54",
            "file": "src/app/components/stockItem/stock-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stock-item",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./stock-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "deleteItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "editItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "itemsToDisplay",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "quantityLimitedItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "toggleActions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "function",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "MatIcon"
                },
                {
                    "name": "MatIconButton"
                },
                {
                    "name": "NgForOf"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from \"@angular/core\";\nimport { ButtonComponent } from '../button/button.component';\nimport { MatIcon } from \"@angular/material/icon\";\nimport { MatIconButton } from \"@angular/material/button\";\nimport { NgClass, NgForOf, NgIf } from \"@angular/common\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: 'app-stock-item',\n  standalone: true,\n  imports: [ButtonComponent, MatIcon, MatIconButton, NgForOf, NgIf, NgClass],\n  templateUrl: './stock-item.component.html',\n  styleUrl: './stock-item.component.css',\n})\nexport class StockItemComponent {\n  constructor(private router: Router) {\n  }\n\n  @Input()\n  itemsToDisplay: any[] = [];\n\n  @Input()\n  quantityLimitedItems: any[] = [];\n\n  @Input()\n  toggleActions!: ($event: MouseEvent) => void;\n\n  @Input()\n  editItem!: (item: any) => void;\n\n  @Input()\n  deleteItem!: (item: any) => void;\n}\n",
            "styleUrl": "./stock-item.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<ng-container *ngIf=\"itemsToDisplay && itemsToDisplay.length > 0\">\n  <div *ngFor=\"let item of itemsToDisplay\">\n    <div class=\"file\" (click)=\"toggleActions($event)\">\n      <div\n        [ngClass]=\"{\n            card: item,\n            'card-warning': quantityLimitedItems.includes(item)\n          }\"\n      >\n        <div class=\"details\">\n            <span class=\"item\">\n              {{\n                item?.item_id?.name ?? \"No name provided\"\n              }}\n            </span>\n        </div>\n        <div class=\"details\">\n            <span class=\"room\">\n              Salle: {{ item?.location_id?.room ?? \"No room provided\" }}\n            </span>\n          <span class=\"quantity-i\">\n            Quantité: {{ item?.quantity ?? \"No quantity provided\" }}\n          </span>\n        </div>\n        <div class=\"actions\">\n          <button\n            mat-icon-button\n            class=\"edit-button\"\n            (click)=\"editItem(item)\"\n          >\n            <mat-icon class=\"pen\" fontIcon=\"edit\">Modifier</mat-icon>\n          </button>\n          <button\n            mat-icon-button\n            class=\"delete-button\"\n            (click)=\"deleteItem(item)\"\n          >\n            <mat-icon class=\"trash\" fontIcon=\"delete\">Supprimer</mat-icon>\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "SuccessPageComponent",
            "id": "component-SuccessPageComponent-6b29f95c7c91d40d267f574cc47d427afd21ba8020fdc14b04bb70265a529777f60cf405615b9c1b6c49f0a50f24fa1f11472ecc5dc2d433fb5400936c35fa40",
            "file": "src/app/pages/SucessPage/SuccessPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-success-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./SuccessPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "link",
                    "defaultValue": "'/home'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "text",
                    "defaultValue": "'Successful'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, SecurityContext } from \"@angular/core\";\nimport { ButtonComponent } from \"../../components/button/button.component\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { NgOptimizedImage } from \"@angular/common\";\nimport { MatIcon } from \"@angular/material/icon\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\n\n@Component({\n  selector: 'app-success-page',\n  standalone: true,\n  imports: [ButtonComponent, NgOptimizedImage, MatIcon],\n  templateUrl: './SuccessPage.component.html',\n  styleUrl: './SuccessPage.component.css',\n})\nexport class SuccessPageComponent implements OnInit{\n  @Input()\n  text: string = 'Successful';\n\n  @Input()\n  link: string = '/home';\n  constructor(private route: ActivatedRoute, private sanitizer: DomSanitizer) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe((params) => {\n      this.text = params['text'] || this.text;\n      this.link = this.sanitizer.sanitize(SecurityContext.URL, params['link'] || this.link) ?? (params['link'] || this.link);\n    });\n  }\n}\n",
            "styleUrl": "./SuccessPage.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [className]=\"'header'\">\n  <a\n    href=\"/\"\n    [className]=\"\n      ['w-100', 'left-align', 'color-black', 'mobile-view'].join(' ')\n    \"\n  >\n    <mat-icon fontIcon=\"arrow_back\" />\n  </a>\n</div>\n<div [className]=\"'container h-100 align-center'\">\n  <img\n    ngSrc=\"assets/img/icons/ISEN-bulles.svg\"\n    alt=\"ISEN bulles\"\n    priority\n    width=\"188\"\n    height=\"196\"\n  />\n\n  <b [className]=\"'text-center mb-25'\">{{ text }}</b>\n  <div [className]=\"'w-100'\">\n    <app-button\n      [label]=\"'Retour'\"\n      [type]=\"'primary'\"\n      [solid]=\"true\"\n      [onClickLink]=\"link\"\n      [css]=\"'w-100'\"\n    />\n  </div>\n</div>\n"
        },
        {
            "name": "ToggleComponent",
            "id": "component-ToggleComponent-2d9bb82d58eecf1e50e80db1d20b9195bb2595c2dabc216f49d8a5495cf3b3311420b39c0d5a85db737ad38be023ddc4c580f58a4a47118c5b444d6b20561474",
            "file": "src/app/components/toggle/toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-toggle",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./toggle.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "clickFunction",
                    "defaultValue": "(item: string) => {}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Function",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedItem",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleItem",
                    "args": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgForOf"
                },
                {
                    "name": "TitleCasePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { NgForOf, TitleCasePipe } from '@angular/common';\n\n@Component({\n  selector: 'app-toggle',\n  standalone: true,\n  imports: [NgForOf, TitleCasePipe],\n  templateUrl: './toggle.component.html',\n  styleUrl: './toggle.component.css',\n})\nexport class ToggleComponent {\n  @Input()\n  public items: string[] = [];\n\n  @Input()\n  public clickFunction: Function = (item: string) => {};\n\n  protected selectedItem: string = '';\n\n  public toggleItem(item: string) {\n    this.selectedItem = item;\n    this.clickFunction(item);\n  }\n}\n",
            "styleUrl": "./toggle.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"toggle-group\">\n  <button\n    *ngFor=\"let item of items\"\n    (click)=\"toggleItem(item)\"\n    [className]=\"'toggle-item'\"\n    [class.active]=\"selectedItem == item\"\n  >\n    {{ item | titlecase }}\n  </button>\n</div>\n"
        },
        {
            "name": "UpdateEventFormPageComponent",
            "id": "component-UpdateEventFormPageComponent-75c777d7768b28465bcfddf614c2087db13c69707fdada4137d91b61bca40e5b45c8e45b70c3a9e382cf1000cbe3eda9be4f6af01792e1c7fb3d3e8eb0f90fec",
            "file": "src/app/pages/UpdateEventFormPage/UpdateEventFormPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                }
            ],
            "selector": "app-update-event-form-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./UpdateEventFormPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiEventUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "eventAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "eventManager",
                    "defaultValue": "{ id: '', last_name: 'A', first_name: 'Definir' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Person",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "eventName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "eventStatus",
                    "defaultValue": "{ id: 0, label: '' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventStatus",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "optionsL",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Location[]",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "optionsM",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Person[]",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "optionsS",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventStatus[]",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "selectedEvent",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDatepicker",
                    "args": [
                        {
                            "name": "datepicker",
                            "type": "MatDatepicker<Date>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 291,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "datepicker",
                            "type": "MatDatepicker<Date>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "displayFn",
                    "args": [
                        {
                            "name": "location",
                            "type": "Location",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "location",
                            "type": "Location",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayMn",
                    "args": [
                        {
                            "name": "person",
                            "type": "Person",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "person",
                            "type": "Person",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "displayS",
                    "args": [
                        {
                            "name": "status",
                            "type": "EventStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "EventStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLocation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPerson",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddressSelected",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOptionSelectedM",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onStatusSelected",
                    "args": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toTitleCase",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateEvent",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "SelectComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatInput"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatNativeDateModule",
                    "type": "module"
                },
                {
                    "name": "MatHint"
                },
                {
                    "name": "MatDatepickerToggle"
                },
                {
                    "name": "MatDatepicker"
                },
                {
                    "name": "MatSuffix"
                },
                {
                    "name": "MatLabel"
                },
                {
                    "name": "MatFormField"
                },
                {
                    "name": "MatAutocomplete"
                },
                {
                    "name": "MatOption"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatAutocompleteTrigger"
                },
                {
                    "name": "MatError"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injectable, OnInit } from '@angular/core';\nimport { ButtonComponent } from '../../components/button/button.component';\nimport { SelectComponent } from '../../components/select/select.component';\nimport {\n  MatFormField,\n  MatHint,\n  MatInput,\n  MatInputModule,\n  MatLabel,\n  MatSuffix,\n} from '@angular/material/input';\nimport {\n  MatDatepicker,\n  MatDatepickerModule,\n  MatDatepickerToggle,\n} from '@angular/material/datepicker';\nimport { MatNativeDateModule, MatOption } from '@angular/material/core';\nimport {\n  MatAutocomplete,\n  MatAutocompleteTrigger,\n} from '@angular/material/autocomplete';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatError, MatFormFieldModule } from '@angular/material/form-field';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { AsyncPipe, CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ConfirmationDialogComponent } from '../../components/confirmationDialog/confirmationDialog.component';\nimport { Person } from '../../interfaces/Person';\nimport { Location } from '../../interfaces/Location';\nimport { MatIcon } from '@angular/material/icon';\nimport { EventStatus } from \"../../interfaces/EventStatus\";\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-update-event-form-page',\n  standalone: true,\n  templateUrl: './UpdateEventFormPage.component.html',\n  styleUrl: './UpdateEventFormPage.component.css',\n  imports: [\n    ButtonComponent,\n    SelectComponent,\n    CommonModule,\n    MatInput,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatHint,\n    MatDatepickerToggle,\n    MatDatepicker,\n    MatSuffix,\n    MatLabel,\n    MatFormField,\n    MatAutocomplete,\n    MatOption,\n    FormsModule,\n    ReactiveFormsModule,\n    MatAutocompleteTrigger,\n    MatError,\n    AsyncPipe,\n    MatIcon,\n  ],\n  providers: [MatDatepickerModule, MatInputModule, MatFormFieldModule],\n})\nexport class UpdateEventFormPageComponent implements OnInit {\n  selectedEvent: any = {};\n\n  private apiUrl = environment.apiEventUrl;\n  protected optionsL: Location[] = [];\n  protected optionsS: EventStatus[] = [];\n  protected optionsM: Person[] = [];\n\n  eventName: string = '';\n  eventAddress: any;\n  eventStatus: EventStatus = { id: 0, label: '' };\n  eventManager: Person = { id: '', last_name: 'A', first_name: 'Definir' };\n\n  constructor(\n    private router: Router,\n    private http: HttpClient,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar,\n  ) {\n    const navigation = this.router.getCurrentNavigation();\n    if (navigation && navigation.extras && navigation.extras.state) {\n      this.selectedEvent = navigation.extras.state?.['selectedEvent'];\n      this.eventManager = this.selectedEvent.item_manager;\n    }\n  }\n\n  displayFn(location: Location): string {\n    return location ? `${location.address}, ${location.city}` : '';\n  }\n\n  displayS(status: EventStatus): string {\n    return status ? status.label : '';\n  }\n\n  displayMn(person: Person): string {\n    return person ? `${person.last_name} ${person.first_name}` : '';\n  }\n\n  getPerson(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + 'person/getAll', {\n      withCredentials: true,\n    });\n  }\n\n  getLocation(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + 'location/getAll', {\n      withCredentials: true,\n    });\n  }\n\n  getStatus(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + 'status/getAll', {\n      withCredentials: true,\n    });\n  }\n\n  onAddressSelected(option: any): void {\n    this.eventAddress = option;\n  }\n\n  onStatusSelected(option: any): void {\n    this.eventStatus = option;\n  }\n\n  onOptionSelectedM(option: any): void {\n    this.eventManager = option;\n  }\n\n  toTitleCase(str: string): string {\n    return str\n      .toLowerCase()\n      .split(' ')\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }\n\n  ngOnInit(): void {\n    this.getLocation().subscribe((data) => {\n      for (const location of data) {\n        const option: Location = {\n          id: location.id,\n          address: location.address,\n          city: location.city,\n          room: location.room,\n        };\n        const exists = this.optionsL.some(\n          (opt) => opt.city === option.city && opt.address === option.address,\n        );\n        if (!exists) {\n          this.optionsL.push(option);\n        }\n      }\n    });\n    this.getStatus().subscribe((data) => {\n      for (const stat of data) {\n        const option: EventStatus = {\n          id: stat.id,\n          label: stat.label,\n        };\n        this.optionsS.push(option);\n      }\n    });\n    this.getPerson().subscribe((data) => {\n      for (const person of data) {\n        const option: Person = {\n          id: person.id,\n          last_name: person.last_name,\n          first_name: person.first_name,\n        };\n        const exists = this.optionsM.some(\n          (opt) =>\n            opt.last_name === option.last_name &&\n            opt.first_name === option.first_name,\n        );\n        if (!exists) {\n          this.optionsM.push(option);\n        }\n      }\n    });\n\n    this.eventStatus.label = this.selectedEvent.status;\n    this.eventName = this.selectedEvent.title;\n  }\n\n  updateEvent(form: NgForm) {\n    const headers = new HttpHeaders().set(\n      'Content-Type',\n      'application/x-www-form-urlencoded',\n    );\n    const eventData = new URLSearchParams();\n    eventData.set('name', this.toTitleCase(this.selectedEvent.title));\n    eventData.set(\n      'date_start',\n      this.selectedEvent.date_start?.toDateString() ?? '',\n    );\n    eventData.set(\n      'date_end',\n      this.selectedEvent.date_end?.toDateString() ?? '',\n    );\n    eventData.set('location.id', this.eventAddress.id);\n    eventData.set('status.label', this.eventStatus.label);\n    eventData.set('contact_objective', this.selectedEvent.contact_objective);\n    eventData.set('stand_size', this.selectedEvent.stand_size);\n    eventData.set('item_manager.last_name', this.eventManager.last_name);\n    eventData.set('item_manager.first_name', this.eventManager.first_name);\n    if (form.valid) {\n      this.http\n        .put(this.apiUrl + this.selectedEvent.id, eventData, {\n          headers,\n          responseType: 'text',\n          withCredentials: true,\n        })\n        .subscribe(\n          () => {\n            this.router.navigate(['/success'], {\n              queryParams: {\n                text:\n                  'L évènement ' +\n                  this.toTitleCase(this.eventName) +\n                  ' a été mis à jour avec succès',\n                link: '/event/list',\n              },\n            });\n          },\n          (error) => {\n            if(error.status === 401) {\n              this.router.navigate(['/'])\n            }\n            console.error(error.status);\n          },\n        );\n    }\n  }\n  deleteEvent() {\n    const dialogRef = this.dialog.open(ConfirmationDialogComponent);\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        this.http\n          .delete(this.apiUrl + this.selectedEvent.id, {\n            responseType: 'text',\n            observe: 'response',\n            withCredentials: true,\n          })\n          .subscribe(\n            (response) => {\n              if (response.status == 204)\n                this.router.navigate(['/success'], {\n                  queryParams: {\n                    text:\n                      \"L'évènement \" +\n                      this.toTitleCase(this.eventName) +\n                      ' a été supprimé avec succès',\n                    link: '/event/list',\n                  },\n                });\n              else {\n                this.snackBar.open(\n                  'Une erreur est survenue: ' + response.body,\n                  'Fermer',\n                  {\n                    duration: 5000,\n                  },\n                );\n              }\n            },\n            (error) => {\n              if(error.status === 401) {\n                this.router.navigate(['/'])\n              }\n              this.snackBar.open(\n                'Une erreur est survenue: ' + error.message,\n                'Fermer',\n                {\n                  duration: 5000,\n                },\n              );\n            },\n          );\n      }\n    });\n  }\n\n  public closeDatepicker(datepicker: MatDatepicker<Date>): void {\n    datepicker['_destroyOverlay']();\n  }\n}\n",
            "styleUrl": "./UpdateEventFormPage.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [className]=\"'header'\">\n  <a\n    href=\"/\"\n    [className]=\"\n      ['w-100', 'left-align', 'color-black', 'mobile-view'].join(' ')\n    \"\n  >\n    <mat-icon fontIcon=\"arrow_back\" />\n  </a>\n  <div [className]=\"'header-container'\">\n    <h2>{{ eventName }} {{ selectedEvent.location }}</h2>\n  </div>\n  <form\n    (ngSubmit)=\"updateEvent(updateEventForm)\"\n    method=\"put\"\n    #updateEventForm=\"ngForm\"\n  >\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Nom de l'événement</mat-label>\n      <input\n        type=\"text\"\n        matInput\n        id=\"event_name_input\"\n        name=\"event_name\"\n        [(ngModel)]=\"selectedEvent.title\"\n        required\n      />\n      <mat-error> Le nom de l'événement ne peut pas être vide.</mat-error>\n    </mat-form-field>\n\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Choisir une date de début</mat-label>\n      <input\n        matInput\n        [matDatepicker]=\"pickerStart\"\n        (dateChange)=\"closeDatepicker(pickerStart)\"\n        required\n        [(ngModel)]=\"selectedEvent.date_start\"\n        name=\"eventStartDate\"\n      />\n      <mat-hint>DD/MM/YYYY</mat-hint>\n      <mat-datepicker-toggle\n        matIconSuffix\n        [for]=\"pickerStart\"\n      ></mat-datepicker-toggle>\n      <mat-datepicker #pickerStart></mat-datepicker>\n      <mat-error>La date de début ne peut pas être vide.</mat-error>\n    </mat-form-field>\n\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Choisir une date de fin</mat-label>\n      <input\n        matInput\n        [matDatepicker]=\"pickerEnd\"\n        (dateChange)=\"closeDatepicker(pickerEnd)\"\n        required\n        [(ngModel)]=\"selectedEvent.date_end\"\n        name=\"eventEndDate\"\n      />\n      <mat-hint>DD/MM/YYYY</mat-hint>\n      <mat-datepicker-toggle\n        matIconSuffix\n        [for]=\"pickerEnd\"\n      ></mat-datepicker-toggle>\n      <mat-datepicker #pickerEnd></mat-datepicker>\n      <mat-error>La date de fin ne peut pas être vide.</mat-error>\n    </mat-form-field>\n\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Adresse</mat-label>\n      <input\n        type=\"text\"\n        aria-label=\"Adresse\"\n        name=\"event_address\"\n        matInput\n        [(ngModel)]=\"eventAddress\"\n        [matAutocomplete]=\"addressauto\"\n        required\n      />\n      <mat-autocomplete\n        #addressauto=\"matAutocomplete\"\n        [displayWith]=\"displayFn\"\n        (optionSelected)=\"onAddressSelected($event.option.value)\"\n      >\n        @for (option of optionsL; track option) {\n          <mat-option [value]=\"option\">\n            {{ option.address }}, {{ option.city }}\n          </mat-option>\n        }\n      </mat-autocomplete>\n      <mat-error>L'adresse ne peut pas être vide.</mat-error>\n    </mat-form-field>\n\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Status</mat-label>\n      <input\n        type=\"text\"\n        aria-label=\"Status\"\n        [value]=\"selectedEvent.status\"\n        name=\"event_status\"\n        matInput\n        [matAutocomplete]=\"statusauto\"\n      />\n      <mat-autocomplete\n        #statusauto=\"matAutocomplete\"\n        [displayWith]=\"displayS\"\n        (optionSelected)=\"onStatusSelected($event.option.value)\"\n      >\n        @for (option of optionsS; track option) {\n          <mat-option [value]=\"option\">\n            {{ option.label }}\n          </mat-option>\n        }\n      </mat-autocomplete>\n    </mat-form-field>\n\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Taille du stand</mat-label>\n      <input\n        type=\"text\"\n        matInput\n        id=\"stand_size_input\"\n        name=\"stand_size\"\n        [(ngModel)]=\"selectedEvent.stand_size\"\n      />\n    </mat-form-field>\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Objectif contact</mat-label>\n      <input\n        type=\"text\"\n        matInput\n        id=\"contact_objective_input\"\n        name=\"contact_objective\"\n        [(ngModel)]=\"selectedEvent.contact_objective\"\n      />\n    </mat-form-field>\n\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Manager</mat-label>\n      <input\n        type=\"text\"\n        placeholder=\"Rechercher un manager\"\n        aria-label=\"Manager\"\n        name=\"event_manager\"\n        matInput\n        [ngModel]=\"eventManager\"\n        [matAutocomplete]=\"autoM\"\n      />\n      <mat-autocomplete\n        #autoM=\"matAutocomplete\"\n        [displayWith]=\"displayMn\"\n        (optionSelected)=\"onOptionSelectedM($event.option.value)\"\n      >\n        @for (option of optionsM; track option) {\n          <mat-option [value]=\"option\">\n            {{ option.last_name }} {{ option.first_name }}\n          </mat-option>\n        }\n      </mat-autocomplete>\n    </mat-form-field>\n\n    <app-button\n      [solid]=\"true\"\n      [type]=\"'primary'\"\n      label=\"Mettre à jour\"\n      id=\"submit\"\n    />\n  </form>\n  <app-button\n    type=\"secondary\"\n    label=\"Supprimer\"\n    [solid]=\"true\"\n    css=\"mt-2\"\n    (click)=\"deleteEvent()\"\n  />\n</div>\n"
        },
        {
            "name": "UpdateInventoryFormPageComponent",
            "id": "component-UpdateInventoryFormPageComponent-7b74e092a8cf57393909e8c563ea9ceae5bd095ed93e6770d2fdf5279a07180dbf89335affc6a91e7ed698e5006311cb1a501e2abab004b2fa84ef1967884eb7",
            "file": "src/app/pages/UpdateInventoryFormPage/UpdateInventoryFormPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "provideAnimations()"
                }
            ],
            "selector": "app-update-inventory-form-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./UpdateInventoryFormPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiStockUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Location[]",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "roomControl",
                    "defaultValue": "new FormControl('', Validators.required)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectedItem",
                    "defaultValue": "{} as ItemLocation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemLocation",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "getLocation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "SelectComponent",
                    "type": "component"
                },
                {
                    "name": "MatFormField"
                },
                {
                    "name": "MatInput"
                },
                {
                    "name": "MatLabel"
                },
                {
                    "name": "MatError"
                },
                {
                    "name": "MatIcon"
                },
                {
                    "name": "MatSelect"
                },
                {
                    "name": "MatOption"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { ButtonComponent } from '../../components/button/button.component';\nimport { SelectComponent } from '../../components/select/select.component';\nimport {\n  MatError,\n  MatFormField,\n  MatFormFieldModule,\n} from '@angular/material/form-field';\nimport { MatInput, MatInputModule, MatLabel } from '@angular/material/input';\nimport { MatOption, MatSelect } from '@angular/material/select';\nimport { provideAnimations } from '@angular/platform-browser/animations';\nimport {\n  FormControl,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { AsyncPipe, NgOptimizedImage } from '@angular/common';\nimport { environment } from '../../../environments/environment';\nimport { Router } from '@angular/router';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ItemLocation } from '../../interfaces/ItemLocation';\nimport { Observable } from 'rxjs';\nimport { Location } from '../../interfaces/Location';\nimport { MatIcon } from '@angular/material/icon';\nimport { UserService } from '../../services/User.service';\n\n@Component({\n  selector: 'app-update-inventory-form-page',\n  standalone: true,\n  imports: [\n    ButtonComponent,\n    SelectComponent,\n    MatFormField,\n    MatInput,\n    MatLabel,\n    MatError,\n    MatIcon,\n    MatSelect,\n    MatOption,\n    ReactiveFormsModule,\n    AsyncPipe,\n    FormsModule,\n    NgOptimizedImage,\n    MatIcon,\n  ],\n  providers: [MatFormFieldModule, MatInputModule, provideAnimations()],\n  templateUrl: './UpdateInventoryFormPage.component.html',\n  styleUrl: './UpdateInventoryFormPage.component.css',\n})\nexport class UpdateInventoryFormPageComponent implements OnInit {\n  public roomControl = new FormControl('', Validators.required);\n  selectedItem: ItemLocation = {} as ItemLocation;\n\n  private apiUrl = environment.apiStockUrl;\n  protected options: Location[] = [];\n\n  constructor(\n    private router: Router,\n    private http: HttpClient,\n    private userService: UserService,\n  ) {\n    const navigation = this.router.getCurrentNavigation();\n    if (navigation && navigation.extras && navigation.extras.state) {\n      this.selectedItem = navigation.extras.state?.['selectedItem'];\n      this.roomControl.setValue(this.selectedItem?.location_id?.room ?? '');\n    }\n  }\n\n  getLocation(): Observable<any> {\n    return this.http.get<any>(this.apiUrl + 'location/getAll', {\n      withCredentials: true,\n    });\n  }\n\n  ngOnInit() {\n    this.getLocation().subscribe((data) => {\n      for (const location of data) {\n        const option: Location = {\n          id: location.id,\n          address: location.address,\n          city: location.city,\n          room: location.room,\n        };\n        if (location.room != '') {\n          this.options.push(option);\n        }\n      }\n    }, (error) => {\n      if(error.status === 401) {\n        this.router.navigate(['/'])\n      }\n      throw error;\n    });\n  }\n\n  updateItem() {\n    if (\n      !this.selectedItem ||\n      !this.selectedItem.item_id ||\n      !this.selectedItem.location_id\n    ) {\n      console.error('Selected item is not properly defined');\n      return;\n    }\n\n    const headers = new HttpHeaders().set(\n      'Content-Type',\n      'application/x-www-form-urlencoded',\n    );\n    const ItemData = new URLSearchParams();\n    ItemData.set('name', this.selectedItem.item_id.name ?? '');\n    ItemData.set('quantity', String(this.selectedItem.quantity ?? 0));\n    ItemData.set('category', this.selectedItem.item_id.category_id.label ?? '');\n    ItemData.set('location.id', String(this.selectedItem.location_id.id ?? ''));\n    this.http\n      .put(\n        this.apiUrl +\n          'item/' +\n          this.selectedItem.item_id.id +\n          '/' +\n          this.selectedItem.location_id.id,\n        ItemData,\n        {\n          headers,\n          responseType: 'text',\n          withCredentials: true,\n        },\n      )\n      .subscribe(\n        () => {\n          this.router.navigateByUrl('stock');\n        },\n        (error) => {\n          if(error.status === 401) {\n            this.router.navigate(['/'])\n          }\n          throw error;\n        },\n      );\n  }\n}\n",
            "styleUrl": "./UpdateInventoryFormPage.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [className]=\"'header'\">\n  <a\n    href=\"/\"\n    [className]=\"\n      ['w-100', 'left-align', 'color-black', 'mobile-view'].join(' ')\n    \"\n  >\n    <mat-icon fontIcon=\"arrow_back\" />\n  </a>\n  <div [className]=\"'header-container'\">\n    <h2>Modification inventaire</h2>\n    <div class=\"container\">\n      <img\n        ngSrc=\"assets/img/logos/logo-inventaire.png\"\n        alt=\"logo inventaire\"\n        class=\"mt-2\"\n        height=\"300\"\n        width=\"300\"\n        priority\n      />\n    </div>\n  </div>\n  <form method=\"post\">\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Matériel</mat-label>\n      <input\n        matInput\n        type=\"text\"\n        id=\"item_selected\"\n        name=\"item\"\n        [(ngModel)]=\"selectedItem.item_id.name\"\n      />\n    </mat-form-field>\n\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Salle</mat-label>\n      <mat-select\n        id=\"room_select\"\n        required\n        [formControl]=\"roomControl\"\n        [(value)]=\"selectedItem.location_id.room\"\n      >\n        @for (option of options; track option) {\n          <mat-option [value]=\"option\">\n            {{ option.room }}\n          </mat-option>\n        }\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Quantité</mat-label>\n      <input\n        type=\"number\"\n        matInput\n        id=\"quantity_input\"\n        name=\"quantity\"\n        placeholder=\"Nouvelle quantité disponible\"\n        [(ngModel)]=\"selectedItem.quantity\"\n        min=\"1\"\n        required\n      />\n      <mat-error>La quantité ne peut pas être inférieure à 1.</mat-error>\n    </mat-form-field>\n\n    <app-button\n      [solid]=\"true\"\n      [type]=\"'primary'\"\n      label=\"Mettre à jour\"\n      id=\"submit\"\n      (click)=\"updateItem()\"\n    ></app-button>\n  </form>\n</div>\n"
        },
        {
            "name": "UpdateLocationFormPageComponent",
            "id": "component-UpdateLocationFormPageComponent-677bb231f0a4905876c3d39af93dd181095f95fc6189994b3c91b578f9ef9cadfc069f0d55401ff9aece9437202185b30d04be68d89dd7c75b908fad80831296",
            "file": "src/app/pages/Admin/UpdateLocationFormPage/UpdateLocationFormPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-update-location-form-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./UpdateLocationFormPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiStockUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "Location",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "selectedLocation",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toTitleCase",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateLocation",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormField"
                },
                {
                    "name": "MatError"
                },
                {
                    "name": "MatInput"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatLabel"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Component, Injectable, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  MatError,\n  MatFormField,\n  MatFormFieldModule,\n  MatLabel,\n} from '@angular/material/form-field';\nimport { MatInput, MatInputModule } from '@angular/material/input';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { ButtonComponent } from '../../../components/button/button.component';\nimport { environment } from '../../../../environments/environment';\nimport { MatIcon } from '@angular/material/icon';\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-update-location-form-page',\n  standalone: true,\n  templateUrl: './UpdateLocationFormPage.component.html',\n  styleUrl: './UpdateLocationFormPage.component.css',\n  imports: [\n    ButtonComponent,\n    CommonModule,\n    MatFormField,\n    MatError,\n    MatInput,\n    MatInputModule,\n    MatLabel,\n    MatFormFieldModule,\n    FormsModule,\n    MatIcon,\n  ],\n})\nexport class UpdateLocationFormPageComponent implements OnInit {\n  selectedLocation: any = {};\n  private apiUrl = environment.apiStockUrl;\n  Location: string = '';\n\n  constructor(\n    private router: Router,\n    private http: HttpClient,\n  ) {\n    const navigation = this.router.getCurrentNavigation();\n    if (navigation && navigation.extras && navigation.extras.state) {\n      this.selectedLocation = navigation.extras.state?.['selectedLocation'];\n    }\n  }\n\n  ngOnInit(): void {\n    this.Location = this.selectedLocation.address;\n  }\n\n  toTitleCase(str: string): string {\n    return str\n      .toLowerCase()\n      .split(' ')\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }\n\n  updateLocation(form: NgForm) {\n    const headers = new HttpHeaders().set(\n      'Content-Type',\n      'application/x-www-form-urlencoded',\n    );\n    const LocationData = new URLSearchParams();\n    LocationData.set(\n      'address',\n      this.toTitleCase(this.selectedLocation.address),\n    );\n    LocationData.set('city', this.toTitleCase(this.selectedLocation.city));\n    LocationData.set('room', this.selectedLocation.room);\n    if (form.valid) {\n      this.http\n        .put(\n          this.apiUrl + 'location/' + this.selectedLocation.id,\n          LocationData,\n          {\n            headers,\n            responseType: 'text',\n            withCredentials: true,\n          },\n        )\n        .subscribe(\n          () => {\n            this.router.navigate(['/success'], {\n              queryParams: {\n                text:\n                  'Le lieu ' +\n                  this.toTitleCase(this.selectedLocation.address) +\n                  ', ' +\n                  this.toTitleCase(this.selectedLocation.city) +\n                  ' a été mis à jour avec succès',\n                link: '/location',\n              },\n            });\n          },\n          (error) => {\n            if(error.status === 401) {\n              this.router.navigate(['/'])\n            }\n          },\n        );\n    }\n  }\n}\n",
            "styleUrl": "./UpdateLocationFormPage.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [className]=\"'header'\">\n  <a\n    href=\"/\"\n    [className]=\"\n      ['w-100', 'left-align', 'color-black', 'mobile-view'].join(' ')\n    \"\n  >\n    <mat-icon fontIcon=\"arrow_back\" />\n  </a>\n  <div [className]=\"'header-container'\">\n    <h2>Mise à jour {{ Location }}</h2>\n  </div>\n\n  <form\n    (ngSubmit)=\"updateLocation(updateLocationForm)\"\n    method=\"post\"\n    #updateLocationForm=\"ngForm\"\n  >\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Addresse</mat-label>\n      <input\n        type=\"text\"\n        matInput\n        name=\"address\"\n        placeholder=\"Adresse\"\n        [(ngModel)]=\"selectedLocation.address\"\n        required\n      />\n      <mat-error> L'adresse ne peut pas être vide.</mat-error>\n    </mat-form-field>\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Ville</mat-label>\n      <input\n        type=\"text\"\n        matInput\n        name=\"city\"\n        placeholder=\"Ville\"\n        [(ngModel)]=\"selectedLocation.city\"\n        required\n      />\n      <mat-error> La ville ne peut pas être vide.</mat-error>\n    </mat-form-field>\n\n    <mat-form-field [className]=\"'form-group'\">\n      <mat-label>Salle</mat-label>\n      <input\n        matInput\n        type=\"text\"\n        id=\"room_selected\"\n        name=\"room\"\n        [(ngModel)]=\"selectedLocation.room\"\n      />\n    </mat-form-field>\n\n    <app-button\n      [solid]=\"true\"\n      [type]=\"'primary'\"\n      label=\"Mettre à jour\"\n      id=\"submit\"\n    />\n  </form>\n</div>\n"
        },
        {
            "name": "UpdateUserPageComponent",
            "id": "component-UpdateUserPageComponent-c71c2ea47595fb1af79dd858994b976b001e22285273b47888e51dbfa8c8d676e1c732ba8fa980f0257c21a7819aa2ee596f35a6d9964d46fb16735c2546efeb",
            "file": "src/app/pages/Admin/UpdateUserPage/UpdateUserPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-update-user-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./UpdateUserPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiUserUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "roles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "roleSelector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "userToUpdate",
                    "defaultValue": "{} as UserRole",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserRole",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatError"
                },
                {
                    "name": "MatFormField"
                },
                {
                    "name": "MatIcon"
                },
                {
                    "name": "MatInput"
                },
                {
                    "name": "MatLabel"
                },
                {
                    "name": "MatOption"
                },
                {
                    "name": "MatSelect"
                },
                {
                    "name": "UpperCasePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\r\nimport { ButtonComponent } from \"../../../components/button/button.component\";\r\nimport { FormsModule, NgForm, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { MatError, MatFormField, MatLabel } from \"@angular/material/form-field\";\r\nimport { MatIcon } from \"@angular/material/icon\";\r\nimport { MatInput } from \"@angular/material/input\";\r\nimport { MatOption } from \"@angular/material/autocomplete\";\r\nimport { MatSelect } from \"@angular/material/select\";\r\nimport { Role } from \"../../../interfaces/Role\";\r\nimport { environment } from \"../../../../environments/environment\";\r\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Router } from \"@angular/router\";\r\nimport { UserRole } from \"../../../interfaces/UserRole\";\r\nimport { UpperCasePipe } from \"@angular/common\";\r\n\r\n@Component({\r\n  selector: 'app-update-user-page',\r\n  standalone: true,\r\n  imports: [\r\n    ButtonComponent,\r\n    FormsModule,\r\n    MatError,\r\n    MatFormField,\r\n    MatIcon,\r\n    MatInput,\r\n    MatLabel,\r\n    MatOption,\r\n    MatSelect,\r\n    UpperCasePipe\r\n  ],\r\n  templateUrl: './UpdateUserPage.component.html',\r\n  styleUrl: './UpdateUserPage.component.css'\r\n})\r\nexport class UpdateUserPageComponent implements OnInit{\r\n  protected roles: Role[] = [];\r\n  private apiUrl: string = environment.apiUserUrl;\r\n\r\n  protected userToUpdate: UserRole = {} as UserRole;\r\n  protected roleSelector: any;\r\n\r\n  constructor(private httpClient: HttpClient, private router: Router) {\r\n    const navigation = this.router.getCurrentNavigation();\r\n    if (navigation && navigation.extras && navigation.extras.state) {\r\n      this.userToUpdate = navigation.extras.state?.['userToUpdate'];\r\n      this.roleSelector = this.userToUpdate.role;\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.httpClient\r\n      .get<Role[]>(this.apiUrl + '/getRoles', { withCredentials: true })\r\n      .subscribe(\r\n        (data) => {\r\n          this.roles = data;\r\n        },\r\n        (error) => {\r\n          if(error.status === 401) {\r\n            this.router.navigate(['/']);\r\n          }\r\n          throw error;\r\n        }\r\n      );\r\n  }\r\n\r\n  public submitForm(form: NgForm) {\r\n    const body = new URLSearchParams();\r\n    body.set('lastName', this.userToUpdate.user.last_name);\r\n    body.set('firstName', this.userToUpdate.user.first_name);\r\n    body.set('role', this.roleSelector);\r\n    body.set('username', this.userToUpdate.user.username);\r\n    body.set('email', this.userToUpdate.user.mail);\r\n\r\n    const headers = new HttpHeaders().set(\r\n      'Content-Type',\r\n      'application/x-www-form-urlencoded',\r\n    );\r\n    this.httpClient.put(this.apiUrl + '/editUser/' + this.userToUpdate.user.id, body, {\r\n      headers,\r\n      responseType: 'text',\r\n      withCredentials: true,\r\n    }).subscribe(null, (error) => {\r\n      if(error.status === 401) {\r\n        this.router.navigate(['/']);\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./UpdateUserPage.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [className]=\"'header'\">\r\n  <a\r\n    href=\"/\"\r\n    [className]=\"\r\n      ['w-100', 'left-align', 'color-black', 'mobile-view'].join(' ')\r\n    \"\r\n  >\r\n    <mat-icon fontIcon=\"arrow_back\" />\r\n  </a>\r\n  <div [className]=\"'header-container'\">\r\n    <h2>Mis à jour de l'utilisateur {{userToUpdate.user.first_name}} {{userToUpdate.user.last_name|uppercase }}</h2>\r\n  </div>\r\n</div>\r\n<div class=\"container\">\r\n  <form (ngSubmit)=\"submitForm(updateUserForm)\"\r\n        #updateUserForm=\"ngForm\">\r\n    <mat-form-field [className]=\"'form-group'\">\r\n      <mat-label>Prénom</mat-label>\r\n      <input\r\n        matInput\r\n        placeholder=\"Antoine\"\r\n        name=\"nameInput\"\r\n        required\r\n        ([ngModel])=\"userToUpdate.user.first_name\"\r\n      />\r\n      <mat-error>Le prénom ne doit pas être vide</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field [className]=\"'form-group'\">\r\n      <mat-label>Nom</mat-label>\r\n      <input\r\n        matInput\r\n        placeholder=\"Dupont\"\r\n        name=\"surnameInput\"\r\n        ([ngModel])=\"userToUpdate.user.last_name\"\r\n        required\r\n      />\r\n      <mat-error>Le nom ne doit pas être vide</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field [className]=\"'form-group'\">\r\n      <mat-label>Nom d'utilisateur</mat-label>\r\n      <input\r\n        matInput\r\n        placeholder=\"antoine.dupont\"\r\n        name=\"usernameInput\"\r\n        ([ngModel])=\"userToUpdate.user.username\"\r\n        required\r\n      />\r\n      <mat-error>Le nom d'utilisateur ne doit pas être vide</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field [className]=\"'form-group'\">\r\n      <mat-label>Rôle</mat-label>\r\n      <mat-select [(value)]=\"roleSelector\" required multiple>\r\n        @for (role of roles; track role) {\r\n          <mat-option value=\"{{ role.id }}\">{{ role.label }}</mat-option>\r\n        }\r\n      </mat-select>\r\n      <mat-error>Le rôle ne peut être vide</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field [className]=\"'form-group'\">\r\n      <mat-label>Email</mat-label>\r\n      <input\r\n        type=\"email\"\r\n        matInput\r\n        placeholder=\"antoine.dupont@isen.fr\"\r\n        name=\"emailInput\"\r\n        ([ngModel])=\"userToUpdate.user.mail\"\r\n        required\r\n      />\r\n      <mat-error>L'adresse mail ne peut être vide</mat-error>\r\n    </mat-form-field>\r\n  </form>\r\n  <div id=\"actionButtons\">\r\n    <app-button\r\n      [solid]=\"true\"\r\n      [type]=\"'primary'\"\r\n      label=\"Modifier l'utilisateur\"\r\n      id=\"submit\"\r\n    />\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "UserListPageComponent",
            "id": "component-UserListPageComponent-8920ca5afc45130f72164c8fcf85bf8e27d5bae47eab5d5906acf969252c2414180e65f808b4436e69ea6cb438361d38eeda18fab452b0c48219f09291da13a8",
            "file": "src/app/pages/Admin/UserListPage/UserListPage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-UserListPage",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./UserListPage.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiUrl",
                    "defaultValue": "environment.apiUserUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "filteredOptions",
                    "defaultValue": "new Observable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<UserRolePermission[]>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "searchFieldControl",
                    "defaultValue": "new FormControl<string | UserRolePermission>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "userRoles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "users",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserRolePermission[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "_filter",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UserRolePermission[]",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "UserRolePermission",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "UserRolePermission",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "UserRolePermission",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "UserRolePermission",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleActions",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "MatFormField"
                },
                {
                    "name": "MatInput"
                },
                {
                    "name": "MatAutocomplete"
                },
                {
                    "name": "MatOption"
                },
                {
                    "name": "MatAutocompleteTrigger"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "MatLabel"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Injectable, OnInit } from '@angular/core';\nimport { ButtonComponent } from '../../../components/button/button.component';\nimport { environment } from '../../../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { AsyncPipe, NgFor } from \"@angular/common\";\nimport { Router } from \"@angular/router\";\nimport { MatFormField } from \"@angular/material/form-field\";\nimport { MatInput, MatLabel } from \"@angular/material/input\";\nimport { MatAutocomplete, MatAutocompleteTrigger, MatOption } from \"@angular/material/autocomplete\";\nimport { FormControl, ReactiveFormsModule } from \"@angular/forms\";\nimport { map, Observable } from \"rxjs\";\nimport { Location } from \"../../../interfaces/Location\";\nimport { ConfirmationDialogComponent } from \"../../../components/confirmationDialog/confirmationDialog.component\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\nimport { UserRolePermission } from \"../../../interfaces/UserRolePermission\";\n\n@Injectable({ providedIn: 'root' })\n@Component({\n  selector: 'app-UserListPage',\n  standalone: true,\n  imports: [ButtonComponent, MatIconModule, MatButtonModule, NgFor, MatFormField, MatInput, MatAutocomplete, MatOption, MatAutocompleteTrigger, ReactiveFormsModule, AsyncPipe, MatLabel],\n  templateUrl: './UserListPage.component.html',\n  styleUrl: './UserListPage.component.css',\n})\nexport class UserListPageComponent implements OnInit {\n  users: UserRolePermission[] = [];\n  private apiUrl = environment.apiUserUrl;\n  protected searchFieldControl = new FormControl<string | UserRolePermission>('');\n  protected filteredOptions: Observable<UserRolePermission[]> = new Observable();\n  protected userRoles: any[] = [];\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar,\n  ) {}\n\n  private _filter(name: string): UserRolePermission[] {\n    const filterValue = name.toLowerCase();\n    return this.users.filter((option) => {\n      option.user.first_name.toLowerCase().includes(filterValue) || option.user.last_name.toLowerCase().includes(filterValue)\n    });\n  }\n\n  toggleActions(event: MouseEvent): void {\n    const fileElement = (event.currentTarget as HTMLElement).closest('.file');\n    if (fileElement) {\n      fileElement.classList.toggle('show-actions');\n    }\n  }\n\n  ngOnInit() {\n    this.http\n      .get<UserRolePermission[]>(this.apiUrl + 'getAllUsers', { withCredentials: true })\n      .subscribe(\n        (data) => {\n          this.users = data;\n          for(let d of data) {\n            let array: string[] = ['']\n            for(let role of d.roles) {\n              array.push(role.label)\n            }\n            this.userRoles.push(array);\n          }\n        }, (error) => {\n          if(error.status === 401) {\n            this.router.navigate(['/']);\n          }\n        }\n      );\n    this.filteredOptions = this.searchFieldControl.valueChanges.pipe(\n      map(value => {\n        const name = typeof value === \"string\" ? value : value?.user.first_name;\n        return name ? this._filter(name as string): this.users.slice();\n      })\n    )\n  }\n  editUser(user: UserRolePermission) {\n    this.router.navigate(['user/update'], {\n      state: { userToUpdate: user },\n    });\n  }\n\n  deleteUser(user: UserRolePermission) {\n    const dialogRef = this.dialog.open(ConfirmationDialogComponent);\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result) {\n        this.http\n          .delete(this.apiUrl + 'editUser/' + user.user.id, {\n            responseType: 'text',\n            observe: 'response',\n            withCredentials: true,\n          })\n          .subscribe(\n            (response) => {\n              if (response.status == 204)\n                this.router.navigate(['/success'], {\n                  queryParams: {\n                    text: \"L'utilisateur a été supprimé avec succès\",\n                    link: '/user',\n                  },\n                });\n              else {\n                this.snackBar.open(\n                  'Une erreur est survenue: ' + response.body,\n                  'Fermer',\n                  {\n                    duration: 5000,\n                  },\n                );\n              }\n            },\n            (error) => {\n              if (error.status === 401) {\n                this.router.navigate(['/']);\n              }\n              this.snackBar.open(\n                'Une erreur est survenue: ' + error.message,\n                'Fermer',\n                {\n                  duration: 5000,\n                },\n              );\n            },\n          );\n      }\n    });\n  }\n}\n",
            "styleUrl": "./UserListPage.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header\">\n  <a\n    href=\"/\"\n    [className]=\"\n      ['w-100', 'left-align', 'color-black', 'mobile-view'].join(' ')\n    \">\n    <mat-icon fontIcon=\"arrow_back\" />\n  </a>\n  <div class=\"header-container\">\n    <h2>Gestion des utilisateurs</h2>\n  </div>\n  <div [className]=\"'d-flex'\">\n  <mat-form-field>\n    <mat-label>Rechercher une personne</mat-label>\n    <input matInput type=\"search\" placeholder=\"Antoine Dupont\" [matAutocomplete]=\"auto\"\n           [formControl]=\"searchFieldControl\"/>\n    <mat-autocomplete #auto=\"matAutocomplete\">\n      @for (option of filteredOptions | async; track option) {\n        <mat-option [value]=\"option\">{{option.user.first_name + \" \" + option.user.last_name}}</mat-option>\n      }\n    </mat-autocomplete>\n  </mat-form-field>\n    <app-button\n      type=\"primary\"\n      label=\"Ajouter un utilisateur\"\n      [solid]=\"true\"\n      onClickLink=\"/user/add\"\n    ></app-button>\n  </div>\n  <div *ngFor=\"let user of users\">\n    <div class=\"file\" (click)=\"toggleActions($event)\">\n      <div class=\"card\">\n        <div class=\"details\">\n          <span class=\"name\">{{\n            user?.user?.first_name ?? \"Prénom non renseigné\"\n          }}</span>\n          <span class=\"surname\">{{ user?.user?.last_name ?? \"Nom non renseigné\" }}</span>\n        </div>\n        <div class=\"details\">\n          <span class=\"mail\">{{ user?.user?.mail ?? \"Aucune adresse mail de renseignée\" }}</span>\n          <span class=\"role\">{{ userRoles[users.indexOf(user)] ?? \"Pas de rôle\" }}</span>\n        </div>\n      </div>\n      <div class=\"actions\">\n        <button mat-icon-button class=\"edit-button\">\n          <mat-icon class=\"pen\" (click)=\"editUser(user)\">Modifier</mat-icon>\n        </button>\n        <button mat-icon-button class=\"delete-button\">\n          <mat-icon class=\"trash\" (click)=\"deleteUser(user)\">Supprimer</mat-icon>\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideRouter(routes),\n    provideAnimationsAsync(),\n    provideHttpClient(),\n    { provide: LOCALE_ID, useValue: 'fr' },\n    { provide: MAT_DATE_LOCALE, useValue: 'fr' }, provideServiceWorker('ngsw-worker.js', {\n            enabled: !isDevMode(),\n            registrationStrategy: 'registerWhenStable:30000'\n          }), provideServiceWorker('ngsw-worker.js', {\n            enabled: !isDevMode(),\n            registrationStrategy: 'registerWhenStable:30000'\n          }),\n  ],\n}"
            },
            {
                "name": "canActivateUserAdmin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n) => inject(UserAdminActivateService).canActivate()"
            },
            {
                "name": "canActivateUserLoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n) => inject(UserLoggedInActivateService).canActivate()"
            },
            {
                "name": "canActivateUserNotLoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n) => inject(UserNotLoggedInActivateService).canActivate()"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiEventUrl: 'http://localhost:5000/event/',\n  apiStockUrl: 'http://localhost:8000/stock/',\n  apiUserUrl: 'http://localhost:5050/auth/',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  apiEventUrl: 'http://promo-api.isen.fr/event/',\n  apiStockUrl: 'http://promo-api.isen.fr/stock/',\n  apiUserUrl: 'http://promo-api.isen.fr/auth/',\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideRouter(routes),\n    provideAnimationsAsync(),\n    provideHttpClient(),\n    { provide: LOCALE_ID, useValue: 'fr' },\n    { provide: MAT_DATE_LOCALE, useValue: 'fr' }, provideServiceWorker('ngsw-worker.js', {\n            enabled: !isDevMode(),\n            registrationStrategy: 'registerWhenStable:30000'\n          }), provideServiceWorker('ngsw-worker.js', {\n            enabled: !isDevMode(),\n            registrationStrategy: 'registerWhenStable:30000'\n          }),\n  ],\n}"
                }
            ],
            "src/app/app.routes.ts": [
                {
                    "name": "canActivateUserAdmin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n) => inject(UserAdminActivateService).canActivate()"
                },
                {
                    "name": "canActivateUserLoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n) => inject(UserLoggedInActivateService).canActivate()"
                },
                {
                    "name": "canActivateUserNotLoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot,\n) => inject(UserNotLoggedInActivateService).canActivate()"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiEventUrl: 'http://localhost:5000/event/',\n  apiStockUrl: 'http://localhost:8000/stock/',\n  apiUserUrl: 'http://localhost:5050/auth/',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  apiEventUrl: 'http://promo-api.isen.fr/event/',\n  apiStockUrl: 'http://promo-api.isen.fr/stock/',\n  apiUserUrl: 'http://promo-api.isen.fr/auth/',\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "canActivateUserAdmin",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "canActivateUserLoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "canActivateUserNotLoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/adminNavbar/adminNavbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminNavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/calendar/calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/components/calendar/calendar.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EventInterface",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/checklistItem/ChecklistItem.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChecklistItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/confirmationDialog/confirmationDialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/select/select.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/stockItem/stock-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StockItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/Alert.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Alert",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/Attendee.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Attendee",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/Category.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Category",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/Event.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Event",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/EventFromAPI.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EventFromAPI",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/EventStatus.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EventStatus",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/EventStatusHistory.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EventStatusHistory",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/Item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Item",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/ItemLocation.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ItemLocation",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/Location.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Location",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/Permission.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Permission",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/Person.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Person",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/ReservedItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReservedItem",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/Role.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Role",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/RolePermission.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RolePermission",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/UserRole.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserRole",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/UserRolePermission.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserRolePermission",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/AddEventFormPage/AddEventFormPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddEventFormPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/AddEventFormPage/AddEventFormPage.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AddEventFormPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/AddInventoryFormPage/AddInventoryFormPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddInventoryFormPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/AddInventoryFormPage/AddInventoryFormPage.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AddInventoryFormPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Admin/AddCategoryForm/AddCategoryForm.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddCategoryFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Admin/AddLocationFormPage/AddLocationFormPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddLocationFormPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Admin/AddLocationFormPage/AddLocationFormPage.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AddLocationFormPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Admin/AddUserFormPage/AddUserFormPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddUserFormPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Admin/AddUserFormPage/AddUserFormPage.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AddUserFormPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Admin/AdminPage/AdminPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Admin/ListCategoryPage/ListCategoryPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListCategoryPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Admin/ListCategoryPage/ListCategoryPage.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ListCategoryPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Admin/LocationListPage/LocationListPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LocationListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Admin/LocationListPage/LocationListPage.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocationListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Admin/UpdateLocationFormPage/UpdateLocationFormPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpdateLocationFormPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Admin/UpdateLocationFormPage/UpdateLocationFormPage.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UpdateLocationFormPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Admin/UpdateUserPage/UpdateUserPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpdateUserPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Admin/UserListPage/UserListPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/Admin/UserListPage/UserListPage.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/AlertListPage/AlertListPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/EventListPage/EventListPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EventListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/HomePage/HomePage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/IMSListPage/IMSListPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IMSListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/IMSListPage/IMSListPage.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IMSListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/InventoryChecklistForEvent/InventoryChecklistForEvent.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InventoryChecklistForEventComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/LogInPage/LogInPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogInPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/LogOutPage/LogOutPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogOutPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/SucessPage/SuccessPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SuccessPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/UpdateEventFormPage/UpdateEventFormPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpdateEventFormPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/UpdateEventFormPage/UpdateEventFormPage.component.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UpdateEventFormPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/UpdateInventoryFormPage/UpdateInventoryFormPage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpdateInventoryFormPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/removeSpecialCharacters.pipe.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SpecialCharactersMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/removeSpecialCharacters.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "RemoveSpecialCharactersPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/User.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/guards/UserAdminActivate.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserAdminActivateService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/guards/UserLoggedInActivate.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserLoggedInActivateService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/guards/UserNotLoggedInActivate.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserNotLoggedInActivateService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}